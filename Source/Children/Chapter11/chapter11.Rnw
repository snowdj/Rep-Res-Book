% Chapter Chapter 11 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 17 April 2015

<<set-parent11, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('Rep-Res-Parent.Rnw')
@

\chapter{Presenting with \emph{knitr}/LaTeX}\label{LatexChapter}

We have already begun to see how LaTeX works for presenting research results. This chapter gives you a more detailed and comprehensive introduction to basic LaTeX document structures and commands. It is not a complete introduction to all that LaTeX is capable of, but we will cover enough that you will be able to create an entire well-formatted article and slideshow with LaTeX that you can use to dynamically present your results. In the next chapter (Chapter \ref{LargeDocs}) we will build on these skills by learning how to use {\emph{knitr}} to create more complex LaTeX documents.

For basic LaTeX documents, such as short articles or simple presentations, it may often be quicker and simpler to write the markup using an R Markdown document and compile it to PDF with the \emph{rmarkdown} package.\index{rmarkdown} As we will see in Chapter \ref{MarkdownChapter}, Markdown syntax is much simpler than normal LaTeX. However, there are at least two reasons why it is useful to become familiar with LaTeX syntax. First, understanding LaTeX syntax will help you debug issues you might encounter when using \emph{rmarkdown} with LaTeX that would otherwise be mysterious if you were only familiar with Markdown. Second, R Markdown has limited capabilities for creating more complex documents such as books and documents with highly customizable formatting needs. Using \emph{kntr} and LaTeX can be useful in these situations.

In this chapter we will learn about basic LaTeX document structures and syntax as well as how to dynamically create LaTeX bibliographies with BibTeX, R, and \emph{knitr}. Finally, we will look at how to create PDF beamer slideshows with LaTeX and \emph{knitr}.

\textbf{Note:} Chapter \ref{LatexChapter} and the following chapter are unusual for this book in that they do not refer to both \emph{knitr} and \emph{rmarkdown}. Instead they focus on capabilities largely exclusive to \emph{knitr}.

\section{The Basics}

In this section we will look at how to create a LaTeX article including what editor programs to use, the basic structure of a LaTeX document, including preamble and body, LaTeX syntax for creating headings, paragraphs, lines, text formatting, math, lists, footnotes, and cross-references. I will assume that you already have a fully functioning TeX distribution\index{TeX distribution} installed on your computer. See Section \ref{InstallMarkup} for information on how to install TeX.

\subsection{Getting started with LaTeX editors}

As I mentioned earlier, RStudio\index{RStudio!LaTeX editor} is a fully functional LaTeX editor in addition to being an integrated development environment for R. If you want to create a new LaTeX document you can click {\tt{File}} in the menu bar then {\tt{New}} \textrightarrow{} {\tt{R Sweave}}.

\begin{wrapfigure}{r}{0.3\textwidth}
    \caption{RStudio TeX Format Options}
    \label{TeXFormat}
    \begin{center}
        \includegraphics[scale=0.6]{Children/Chapter11/images11/TeXFormat.png}
    \end{center}
\end{wrapfigure}

Remember from Chapter \ref{GettingStartedRKnitr} that R Sweave\index{R Sweave} files are basically LaTeX files that can include {\emph{knitr}} code chunks. You can use RStudio to knit and compile a document with the click of one button: \textbf{Compile PDF}\index{RStudio!Compile PDF button} (\includegraphics[scale=0.5]{Children/Chapter11/images11/CompilePDF.png}). You can use this button to compile R Sweave files like regular LaTeX files in RStudio even if they do not have code chunks. If you use another program to compile them you might need to change the file extension from {\tt{.Rnw}} to {\tt{.tex}}. You can also insert many of the items we will cover in this section into your documents with RStudio's LaTeX \texttt{TeX Format} button.\index{RStudio!TeX format button} See Figure \ref{TeXFormat}.

There are many other LaTeX editors\index{LaTeX!editors}\footnote{Wikipedia has collated a table that comprehensively compares many of these editors: \url{http://en.wikipedia.org/wiki/List_of_text_editors}.} and many text editors that can be modified to compile LaTeX documents. For example, alongside writing this book in RStudio, I typed much of the LaTeX markup in the Sublime Text\footnote{http://www.sublimetext.com/} text editor.\index{Sublime Text} None of these options have RStudio's high-level integration with \emph{knitr}, however.\footnote{Andrew Wheiss has created a Sublime Text plugin called \emph{KnitrSublime}. It enables some R LaTeX integration. For more details see: \url{https://GitHub.com/andrewheiss/KnitrSublime}.}

If you are new to LaTeX you may be more comfortably using Lyx.\index{Lyx} Lyx has a Microsoft Word-type interface, but creates actual LaTeX documents. It also has \emph{knitr} integration. See Chapter \ref{GettingStartedRKnitr}'s Appendix for how to set up and use \emph{knitr} and Lyx.

\subsection{Basic LaTeX command syntax}\index{LaTeX!basic command syntax}

As you probably noticed in Part III's examples, LaTeX commands start with a backslash (\texttt{\textbackslash{}}). For example, to create a section heading you use the \verb|\section| command.\index{LaTeX command!section} The arguments for LaTeX commands are written inside of curly braces (\verb|{}|) like this:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}
    \begin{kframe}
        \begin{verbatim}
\section{My Section Name}
            \end{verbatim}
        \end{kframe}
\end{knitrout}

\noindent Probably one of the biggest sources of errors that occur when compiling a LaTeX document to PDF\index{PDF}\index{LaTeX!error} are caused by curly brackets that aren't closed, i.e. an open bracket (\verb|{|) is not matched with a subsequent closed bracket (\verb|}|). Watch out for this and use an editor (like RStudio) that highlights brackets' matching pairs. As we will see, unlike in R with parentheses, if your LaTeX command does not have an argument you do not need to include the curly brackets at all.

There are a number of places to find comprehensive lists of LaTeX commands. The Netherlands TeX users group\index{Netherlands TeX users} has compiled one: \url{http://www.ntg.nl/doc/biemesderfer/ltxcrib.pdf}.

\subsection{The LaTeX preamble \& body}\label{LaTeXPreamble}

\index{LaTeX!preamble|(}

All LaTeX documents require a preamble. The preamble goes at the very beginning of the document. The preamble usually starts with the \texttt{documentclass}\index{LaTeX command!documentclass} command. This specifies what type of presentation document you are creating--e.g. an article, a book, a slideshow,\footnote{``Slideshow'' is not a valid class. One slideshow class that we discuss later is called ``beamer''.} and so on. LaTeX refers to these as classes.\index{LaTeX!class} Classes specify a document's formatting. You can add options to \texttt{documentclass} to change the format of the entire document. For example, if we wanted to create an article class document with two columns we would type:

<<Ch11DCOptions, eval=FALSE, tidy=FALSE>>=
\documentclass[twocolumn]{article}
@

In the preamble you can also specify other style options and load any extra packages\index{LaTeX!packages} you may want to use.\footnote{The command to load a package in LaTeX is \texttt{\textbackslash{}usepackage}.\index{LaTeX command!usepackage} For example, if you include \texttt{\textbackslash{}usepackage\{url\}} in the preamble of your document you will be able to specify URL links in the body with the command \texttt{\textbackslash{}url\{SOMEURL\}}.\index{LaTeX package!url}}

The preamble is often followed by the body of your document. It is specified with the \texttt{body} environment.\index{LaTeX environment!body} See Chapter \ref{TablesChapter} (Section \ref{LaTeXEnviron}) for more details about LaTeX environments. You tell LaTeX where the body\index{LaTeX!begin document} of your document starts by typing \verb|\begin{document}|. The very last line of your document is usually \verb|\end{document}|, indicating that your document has ended. When you open a new R Sweave file in RStudio it creates an article class\index{LaTeX class!article} document with a very simple preamble and body like this:

<<Ch11FirstOpenDoc, eval=FALSE, tidy=FALSE>>=
\documentclass{article}

\begin{document}




\end{document}
@

\noindent This is all you need to get a very basic article class document working. If you want the document to be of another class, simply change \texttt{article} to something else, a \texttt{book} for example.

Let's begin to modify the markup. First we will include in the preamble the (\texttt{hyperref})\index{LaTeX package!hyperref} for clickable hyperlinks and \texttt{natbib}\index{LaTeX package!natbib} for bibliography formatting.\index{bibliography} We will discuss \texttt{natbib} in more detail below. Note that in general, and unlike in R, almost all of the LaTeX packages you will use are installed on your computer when you installed the TeX distribution.

\index{LaTeX!preamble|)}

Next, it's often a good idea to include \emph{knitr} code chunks that specify features of the document as a whole. These can include global chunk options\index{knitr!global chunk options} as well as loading data and packages used throughout the document.

Then it's a good idea to specify title information just after the \texttt{document} environment begins.\index{LaTeX environment!document} Use the \texttt{title}\index{LaTeX command!title} command to add a title, the \texttt{author}\index{LaTeX!author} command to add author information, and \texttt{date}\index{LaTeX command!date} to specify the date.\footnote{In some document classes the current data will automatically be included if you don't specify the date.} Then include the \texttt{maketitle} command.\index{LaTeX command!maketitle} This will place your title and author information in the body of the document. If you are writing an article you may also want to follow \texttt{maketitle} with an abstract. Unsurprisingly, you can use the \texttt{abstract}\index{LaTeX environment!abstract} environment to include this.

Here is a full LaTeX article class document with all of these changes added:

{\scriptsize
\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
%%%%%%%%%%%%%%  Article Preamble %%%%%%%%%%%%%%
\textbackslash{}documentclass\{article\}

%%%% Load LaTeX packages
\textbackslash{}usepackage\{hyperref\}
\textbackslash{}usepackage[authoryear]\{natbib\}

%%%% Set knitr global options and gather data
\textless{}\textless{}Global, include=FALSE\textgreater{}\textgreater{}=
\hlcom{#### Set chunk options ####}
opts_chunk$\hlkwd{set}(fig.align=\hlstr{'center'})

\hlcom{#### Load and cite R packages ####}
\hlcom{# Create list of packages}
PackagesUsed <- c(\hlstr{"knitr", "ggplot2", "repmis"})

\hlcom{# Load PackagesUsed and create .bib BibTeX file}
\hlcom{# Note must have repmis package installed.}
repmis::LoadandCite(PackagesUsed, file = \hlstr{"Packages.bib"}, install = FALSE)

\hlcom{#### Gather Democracy data from Pemstein et al. (2010) ####}
\hlcom{# For simplicity, store the URL in an object called 'url'.}
url <- \hlstr{"http://www.unified-democracy-scores.org/files/20140312/z/uds_summary.csv.gz"}

\hlcom{# Create a temporary file called 'temp' to put the zip file into.}
temp <- \hlkwd{tempfile}()

\hlcom{# Download the compressed file into the temporary file.}
\hlkwd{download.file}(url, temp)

\hlcom{# Decompress the file and convert it into a data frame}
\hlcom{# class object called 'data'.}
UDSData <- \hlkwd{read.csv}(\hlkwd{gzfile}(temp, \hlstr{"uds_summary.csv"}))

\hlcom{# Delete the temporary file.}
\hlkwd{unlink}(temp)

@

%%%% Start document body
\textbackslash{}begin\{document\}

%%%%%%%%%%%%% Create title %%%%%%%%%%%%%%%%%
\textbackslash{}title\{An Example knitr LaTeX Article\}
\textbackslash{}author\{Christopher Gandrud \textbackslash{}\textbackslash{}
Hertie School of Governance\textbackslash{}thanks\{Email: \textbackslash{}href\{mailto:gandrud@hertie-school.org\}
\{gandrud@hertie-school.org\}\}\}
\textbackslash{}date\{January 2015\}
\textbackslash{}maketitle

%%%%%%%%%%%%% Abstract %%%%%%%%%%%%%%%%%%%%
\textbackslash{}begin\{abstract\}
  Here is an example of a knittable article class LaTeX document.
\textbackslash{}end\{abstract\}

%%%%%%%%%%% Article Main Text %%%%%%%%%%%%%
\textbackslash{}section\{The Graph\}

I gathered data from \textbackslash{}cite\{Pemstein2010\} on countries' democracy level. They call their
democracy measure the Unified Democracy Score (UDS). Figure \textbackslash{}ref\{DemPlot\} shows the mean
UDS scores over time for all of the countries in their sample.

\textbackslash{}begin\{figure\}
    \textbackslash{}caption\{Mean UDS Scores\}
    \textbackslash{}label\{DemPlot\}
\textless{}\textless{}echo=FALSE, message=FALSE, warning=FALSE, out.width='7cm', out.height='7cm'\textgreater{}\textgreater{}=
\hlcom{# Graph UDS scores}
\hlkwd{ggplot}(UDSData, \hlkwd{aes}(x = year, y = mean)) +
    \hlkwd{geom_point}(alpha = I(0.1)) +
    \hlkwd{stat_smooth}(size = 2) +
    \hlkwd{ylab}(\hlstr{"Democracy Score"}) + \hlkwd{xlab}(\hlstr{""}) +
    \hlkwd{theme\_bw}()
@
\textbackslash{}end\{figure\}

%%%%%%%%%%% Reproducing the Document %%%%%
\textbackslash{}section\*\{Appendix: Reproducing the Document\}

This document was created using R version
\textbackslash{}Sexpr\{\hlkwd{paste0}(version$major, ".", version$minor)\}
and the R package \textbackslash{}emph\{knitr\}
\textbackslash{}citep\{R-knitr\}. It also relied on the R packages
\textbackslash{}emph\{ggplot2\} \textbackslash{}citep\{R-ggplot2\} and \textbackslash{}emph\{repmis\} \textbackslash{}citep\{R-repmis\}.
The document can be completely reproduced from
source files available on GitHub at:
\textbackslash{}url\{https://GitHub.com/christophergandrud/Rep-Res-Examples\}.

%%%%%%%%% Bibliography %%%%%%%%%%%%%%%%%%%%
\textbackslash{}bibliographystyle\{apa\}
\textbackslash{}bibliography\{Main.bib,Packages.bib\}

\textbackslash{}end\{document\}
        \end{alltt}
    \end{kframe}
\end{knitrout}
}

\noindent The \emph{knitr} code chunk\index{knitr!code chunk} syntax should be familiar to you from previous chapters, so let's unpack the LaTeX syntax from just after the first code chunk, including the ``Create Title'' and ``Abstract'' parts. New syntax shown in later parts of this example is discussed in the remainder of this section and the next section on bibliographies.

First, remember that the percent sign (\%) is LaTeX's comment character. Using it to comment your markup can make it easier to read. Second, as we saw in Chapter \ref{TablesChapter} (Section \ref{LaTeXTables}), double backslashes (\verb|\\|),\index{LaTeX!\textbackslash{}\textbackslash{}} like those after the author's name, force a new line in LaTeX. We will discuss the \texttt{emph} command in a moment. Third, using the \texttt{thanks}\index{LaTeX command!thanks} command allows us to create a footnote for author contact information\footnote{Frequently it also includes thank-yous to people who have helped the research.} that is not numbered like the other footnotes (see below). Finally, you'll notice \verb|\href{mailto: . . . .org}}|.\index{LaTeX command!href}\index{LaTeX command!mailto} This creates an email address in the final document that will open the reader's default email program\index{LaTeX!email program} when clicked.

Finally, you may have noticed the following line:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
\textbackslash{}Sexpr\{paste0(version$major, ".", version$minor)\}
        \end{alltt}
    \end{kframe}
\end{knitrout}
\noindent This code finds the current version of R being used and prints the version number into the presentation document.

\subsection{Headings}\index{LaTeX!headings}

Earlier in the chapter we briefly saw how to create section-level headings with \texttt{section}.\index{LaTeX command!section} There are a number of other sub-section-level headings including \texttt{subsection}, \texttt{subsubsection}, \texttt{paragraph}, and \texttt{subparagraph}.\index{LaTeX command!subsection}\index{LaTeX command!subsubsection}\index{LaTeX command!paragraph}\index{LaTeX command!subparagraph} Headers are numbered automatically by LaTeX.\footnote{The \texttt{paragraph} level does not have numbers.} To have an unnumbered section,\index{LaTeX!unnumbered section} place an asterisk in it like this: \verb|\section*{Unnumbered Section}|. In book class documents you can also use \texttt{chapter}\index{LaTeX command!chapter} to create new chapters and \texttt{part} for collections of chapters.\index{LaTeX command!part}

\subsection{Paragraphs \& spacing}\index{LaTeX!paragraph}\index{LaTeX!spacing}

In LaTeX, paragraphs are simply created by adding a blank line between lines. It will format all of the tabs for the beginning of paragraphs based on the document's class rules. As we discussed before, writing tabs in the markup version of your document does nothing in the compiled document. They are generally used just to make the markup easier for people to read.\index{LaTeX!tabs}

Note that adding more blank lines between paragraphs will not add extra space between the paragraphs in the final document. To specify the space following paragraphs (or almost any line) use the \texttt{vspace} (vertical space) command.\index{LaTeX command!vspace} For example, to add three centimeters of vertical space on a page type: \verb|\vspace{3cm}|. This gives us the following space:

\vspace{3cm}

Similarly, adding extra spaces between words in your LaTeX markup won't create extra spaces between words in the compiled document. To add horizontal space use the \texttt{hspace}\index{LaTeX command!hspace} command in the same way as \texttt{vspace}.

\subsection{Horizontal lines}\index{LaTeX command!hline}\index{LaTeX command!hrulefill}\index{LaTeX!lines}

Use the \texttt{hrulefill} command to create horizontal lines in the text of your document. For example, \verb|\hrulefill| creates:

\vspace{0.2cm}

\hrulefill

\noindent Inside of a \verb|tabular| environment,\index{LaTeX environment!tabular} use the \verb|hline| command rather than \verb|hrulefill|.

\subsection{Text formatting}

Let's briefly look at how to do some of the more common types of text formatting in LaTeX and how to create some commonly used diacritics and special characters.

\paragraph{Italics \& Bold}\index{LaTeX!italics}\index{LaTeX!emphasis}\index{LaTeX!bold}

To italicize a word in LaTeX use the \texttt{emph} (emphasis) command.\index{LaTeX command!emph} For bold use \texttt{textbf}.\index{LaTeX command!textbf} You can nest commands inside of one another to combine their effect. For example, to \emph{\textbf{italicize and bold}} a word use: \verb|\emph{textbf{italicize and bold}}|.

\paragraph{Font size}\label{FontSize}\index{LaTeX!font size}

You can specify the base font size of an entire document with a \texttt{documentclass} option. For example, to create an article with 12-point font use: \texttt{\textbackslash{}documentclass[12pt]\{article\}}.

There are a number of commands to set the size of specific pieces of text relative to the base size. See Table \ref{LaTeXFontSize} for the full list. Usually a slightly different syntax is used for these commands that goes like this: \verb|{\SIZE_COMMAND . . . }|. For example, to use the {\tiny{tiny size}} in your text use: \verb|{\tiny{tiny size}}|.

You can change the size of code chunks that \emph{knitr} places in presentation documents using these commands. Just place the code chunk inside of \verb|{\SIZE_COMMAND . . . }|. This is similar to using the \verb|size| code chunk option.\index{knitr option!size}


\begin{table}
    \caption{LaTeX Font Size Commands}
    \label{LaTeXFontSize}
    \begin{center}
        \vspace{0.2cm}
        \begin{tabular}{c}
            {\Huge \texttt{Huge}} \\
            {\huge \texttt{huge}} \\
            {\LARGE \texttt{LARGE}} \\
            {\Large \texttt{Large}} \\
            {\large \texttt{large}} \\
            {\normalsize \texttt{normalsize}} \\
            {\small \texttt{small}} \\
            {\footnotesize \texttt{footnotesize}} \\
            {\scriptsize \texttt{scriptsize}} \\
            {\tiny \texttt{tiny}}
        \vspace{0.2cm}
        \end{tabular}
    \end{center}
\end{table}

\paragraph{Diacritics}\index{LaTeX!diacritics}

You cannot directly enter letters with diacritics--e.g. accent mark--into LaTeX. For example, to create a letter c with a cedilla (\c{c}) you need to type \verb|\c{c}|. To create an `a' with an acute accent (\'{a}) type: \verb|\'{a}|. There are obviously many types of diacritics and commands to include them within LaTeX-produced documents. For a comprehensive discussion of the issue and a list of commands see the LaTeX Wikibook page on the topic: \url{http://en.wikibooks.org/wiki/LaTeX/Special_Characters}. If you regularly use non-English alphabets you might also be interested in reading the LaTeX Wikibook page on on internationalization: \url{http://en.wikibooks.org/wiki/LaTeX/Internationalization}.\index{LaTeX!internationalization}\index{LaTeX!non-English characters}

\paragraph{Quotation marks}\index{LaTeX!quotation marks}

To specify double left quotation marks (``) use two back ticks (\verb|``|). For double right quotes ('') use two apostrophes (\verb|''|). Single quotes follow the same format (\verb|`'|).

\subsection{Math}\index{LaTeX!math}\label{MathLaTeX}

LaTeX is particularly popular among quantitative researchers and mathematicians because it is very good at rendering mathematics. A complete listing of every math command would take up quite a bit of space.\footnote{See the Netherlands TeX user group list mentioned earlier for an extensive compilation of math commands.} I am briefly going to discuss how to include math in a LaTeX document. This discussion includes a few math syntax examples.

To include math inline with your text, place the math syntax in between backslashes and parentheses, i.e. \verb|\( . . . \)|. For example, \verb|\( s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1} \)| produces \( s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1} \) in our final document.\footnote{Instead of backslashes and parentheses you can also use a pair of dollar signs (\texttt{\$\ldots \$})\index{LaTeX!\$}.} We can display math separately from the text by placing the math commands inside of backslashes and square brackets: \verb|\[ . . . \]|.\footnote{Equivalently, use two pairs of dollar signs (\texttt{\$\$\ldots \$\$}) or the \texttt{display} environment.\index{LaTeX environment!display} Though it will still work in most cases, the double dollar sign math syntax may cause errors. You can also number display equations using the \texttt{equation} environment.\index{LaTeX environment!equation}} For example,

<<Ch11Math, eval=FALSE, engine='sh'>>=
\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\]
@

\noindent gives us:

\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\]

\subsection{Lists}\index{LaTeX!lists}

To create bullet lists\index{LaTeX!bullet lists} in LaTeX use the \texttt{itemize}\index{LaTeX environment!itemize} environment. Each list item is delimited with the \texttt{item}\index{LaTeX command!item} command. For example:

<<Ch11Lists1, eval=FALSE, tidy=FALSE>>=
\begin{itemize}
    \item The first item.
    \item The second item.
    \item The third item.
\end{itemize}
@

\noindent gives us:

\begin{itemize}
    \item The first item.
    \item The second item.
    \item The third item.
\end{itemize}

\noindent To create a numbered list use the \texttt{enumerate}\index{LaTeX environment!enumerate} environment instead of \texttt{itemize}. You can create sublists\index{LaTeX!sublists} simply by nesting lists inside of lists like this:

<<Ch11Lists2, eval=FALSE, tidy=FALSE>>=
\begin{itemize}
    \item The first item.
    \item The second item.
    \begin{itemize}
        \item A sublist item
    \end{itemize}
    \item The third item.
\end{itemize}
@

\noindent which gives us:

\begin{itemize}
    \item The first item.
    \item The second item.
    \begin{itemize}
        \item A sublist item
    \end{itemize}
    \item The third item.
\end{itemize}

\subsection{Footnotes}\index{LaTeX!footnotes}

Plain, non-bibliographic footnotes are easy to create in LaTeX. Simply place \texttt{\textbackslash{}footnote\{} where you would like the footnote number to appear in the text. Then type the footnote's text. Of course, remember to close the footnote with a \texttt{\}}. LaTeX does the rest, including formatting and numbering.

\subsection{Cross-references}\index{LaTeX!cross-references}

LaTeX will also automatically format cross-references. We were already partially introduced to cross-references in chapters \ref{TablesChapter} and \ref{FiguresChapter}. At the place where you would like to reference, add a \texttt{label} such as \verb|\label{ACrossRefLabel}|.\index{LaTeX command!label} It doesn't really matter what label you choose, though make sure they are not duplicated in the document. Also, it can be a good idea to use the same conventions that we learned for labeling R objects (see Section \ref{ObjectNames}). Then place a \texttt{ref}\index{LaTeX command!ref} command (e.g. \verb|\ref{ACrossRefLabel|) at the place in the text where you want the cross-reference to be.

If you place the \texttt{label} on the same line as a heading command, \texttt{ref} will place the heading number. If \texttt{label} is in a \texttt{table} or \texttt{figure} environment you will get the table or figure number. You can also use \texttt{pageref} instead of \texttt{ref} to include the page number. Finally, loading the \emph{hyperref}\index{LaTeX package!hyperref} package makes cross-references (or footnote) clickable. Clicking on them will take you to the items they refer to.

\section{Bibliographies with BibTeX}\label{BibTeXBib}\index{BibTeX|(}\index{LaTeX!bibliographies|(}\index{bibliography|(}

LaTeX can take advantage of very comprehensive bibliography-making capabilities. All major TeX distributions come with BibTeX. BibTeX is basically a tool for creating databases of citation information. In this section, we are going to see how to incorporate a BibTeX bibliography into your LaTeX documents. Then we will learn how use R to automatically generate a bibliography of packages used to create a knitted document. For more information on BibTeX syntax see the LaTeX Wikibook page on Bibliography management: \url{http://en.wikibooks.org/wiki/LaTeX/Bibliography_Management}.

\subsection{The \emph{.bib} file}

BibTeX bibliographies are stored in plain-text files with the extension \texttt{.bib}. These files are databases of citations.\footnote{The order of the citations does not matter.} The syntax for each citation goes like this:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
@DOCUMENT_TYPE\{CITE_KEY,
    title = \{TITLE\},
    author = \{AUTHOR\},
    . . . = \{. . .\}
\}
        \end{alltt}
\end{kframe}
\end{knitrout}

\noindent \verb|DOCUMENT_TYPE| specifies what type of document--article, book, webpage, and so on--the citation is for. This determines what items the citation can and needs to include. Then we have the \verb|CITE_KEY|.\index{BibTeX!citation keys} This is the reference's label that you will use to include the citation in your presentation documents. We'll look more at this later in the section. Each citation must have a unique \verb|CITE_KEY|. A common way to write these keys is to use the author's surname and the publication year, e.g. \verb|Donoho2009|. The cite key is followed by the other citation attributes such as \texttt{author}, \texttt{title}, and \texttt{year}. These attributes all follow the same syntax: \verb|ATTRIBUTE = {. . .}|.

It's worth taking a moment to discuss the syntax for the BibTeX author attribute. First, multiple author names are separated by \texttt{and}. Second, BibTeX assumes that the last word for each author is their surname. If you would like multiple words to be taken as the ``surname'' then enclose these words in curly brackets. If we wanted to cite the World Bank\index{World Bank, citing} as an author we write \verb|{World Bank}|; otherwise it will be formatted ``Bank, World'' in the presentation document.

Here is a complete BibTeX entry for \cite{Donoho2009}:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
@article\{Donoho2009,
  author = \{David L Donoho and Arian Maleki and Morteza
  Shahram and Inam Ur Rahman and Victoria Stodden\},
  title = \{Reproducible research in computational harmonic
    analysis\},
  journal = \{Computing in Science \& Engineering\},
  year = \{2009\},
  volume = \{11\},
  number = \{1\},
  pages = \{8--18\}
\}
        \end{alltt}
\end{kframe}
\end{knitrout}

\noindent Each item of the entry must end in a comma, except the last one.\footnote{This is very similar to how we create vectors in R, though in BibTeX you can actually have a comma after the last attribute.}

\subsection{Including citations in LaTeX documents}

When you want to include citations from a BibTeX file in your LaTeX document you first use the \texttt{bibliography}\index{LaTeX command!bibliography} command. For example, if the BibTeX file is called \emph{Main.bib} and it is in the same directory as your markup document, then type: \verb|\bibliography{Main.bib}|. You can use a bibliography stored in another directory; just include the appropriate file path information. Usually \texttt{bibliography} is placed right before \verb|\end{document}| so that it appears at the end of the compiled presentation document.

You can also specify how you would like the references to be formatted using the \texttt{bibliographystyle}\index{LaTeX command!bibliographystyle} command. For example, this book uses the American Psychological Association (APA)\index{APA} style for references. To set this I included \verb|\bibliographystyle{apa}| directly before \texttt{bibliography}. The default style\footnote{It is referred to in LaTeX as the plain style.} is to number citations (e.g. [1]) rather than include author-year information\footnote{This is sometimes referred to as the ``Harvard'' style.} used by the APA. You will need to include the LaTeX package \emph{natbib}\index{LaTeX package!Natbib} in your preamble to be able to use author-year citation styles. This book includes \verb|\usepackage[authoryear]{natbib}| in its preamble.\index{author-year citations}\index{Harvard style citations}

Place the \texttt{cite}\index{LaTeX command!cite} command in your document's text where you want to place a reference. You include the \verb|CITE_KEY| for the reference in this command, e.g. \verb|\cite{Donoho2009}|. You can include multiple citations in \texttt{cite}, just separate the \verb|CITE_KEY|s with commas. You can add options such as the page numbers or other text to a citation using square brackets ([]). For example, if we wanted to cite the tenth page of \cite{Donoho2009} we type: \verb|\cite[10]{Donoho2009}|. The author-year style in-text citation that this produces looks like this: \cite[10]{Donoho2009}. You can add text at the beginning of a citation with another set of square brackets. Typing \verb|\cite[see][10]{Donoho2009}| gives us: \cite[see][10]{Donoho2009}.

If you are using an author-year style you can use a variety of \emph{natbib} commands to change what information is included in the parentheses. For a selection of these commands and examples, see Table \ref{NatbibTable}.

\begin{table}
    \caption{A Selection of \emph{natbib} In-text Citation Style Commands}
    \label{NatbibTable}
        \begin{center}
            \begin{tabular}{l r}
                \hline
                Command Example & Output \\[0.25cm]
                \hline\hline
                \verb|\cite{Donoho2009}| & \cite{Donoho2009} \\
                \verb|\citep{Donoho2009}| & \citep{Donoho2009} \\
                \verb|\citeauthor{Donoho2009}| & \citeauthor{Donoho2009} \\
                \verb|\citeyear{Donoho2009}| & \citeyear{Donoho2009} \\
                \verb|\citeyearpar{Donoho2009}| & \citeyearpar{Donoho2009} \\
                \hline
            \end{tabular}
        \end{center}
\end{table}

\subsection{Generating a BibTeX file of R package citations}\index{BibTeX!automatic generation}

Researchers are pretty good about citing others' articles and data. However, citations of R packages used in analyses is very inconsistent. This is unfortunate not only because correct attribution is not being given to those who worked to create the packages, but also because it makes reproducibility harder. Not citing packages obscures important steps that were taken in the research process, primarily which package versions were used. Fortunately, there are R tools for quickly and dynamically generating package BibTeX files, including the versions of the packages you are using. They will automatically update the citations each time you compile your document to reflect any changes made to the packages.

You can automatically create citations for R packages using the \texttt{citation}\index{R function!citation} command inside of a code chunk. For example, if you want the citation information for the \texttt{xtable}\index{xtable} package you simply type:

{\small
<<Ch11IntroCite>>=
citation("xtable")
@
}

\noindent This gives you both the plain citation as well as the BibTeX version. If you only want the BibTeX version of the citation you can use the \texttt{toBibtex} command.\index{R function!toBibTeX}

<<Ch11IntrotoBibtex>>=
toBibtex(citation("xtable"))
@

The {\emph{knitr}} package creates BibTeX bibliographies for R packages with the \verb|write_bib|\index{R function!write\_bib} command. Let's make a BibTeX file called \emph{Packages.bib} containing citation information for the \emph{xtable} package.

<<Ch10OneBib, eval=FALSE, tidy=FALSE>>=
# Create package BibTeX file
knitr::write_bib("xtable",
                 file = "Packages.bib")
@

\noindent \verb|write_bib| automatically assigns each entry a cite key using the format \verb|R-PACKAGE_NAME|, e.g. \verb|R-xtable|.

\textbf{Warning:} \emph{knitr}'s \verb|write_bib| command currently does not have the ability to append package citations to an existing file, but instead writes them to a new file. If there is already a file with the same name, it will overwrite the file. So, be very careful using this command to avoid accidental deletions. It is a good idea to have \verb|write_bib| always write to a file specifically for automatically generated package citations. You can include more than one bibliography in LaTeX's \texttt{bibliography} command. All you need to do is separate them with a comma.

<<Ch11TwoBibs, eval=FALSE, tidy=FALSE>>=
\bibliography{Main.bib,Packages.bib}
@

We can use these techniques to automatically create a BibTeX file with citation information for all of the packages used in a research project. Simply make a character vector of the names of packages that you would like to include in your bibliography. Then run this through \verb|write_bib|.

You can make sure you are citing all of the key packages used in a knitted document by (a) creating a vector of all of the packages and then (b) using this in the following code to both load the packages and write the bibliography:

<<Ch11LoadCite, eval=FALSE>>=
# Package list
PackagesUsed <- c("ggplot2", "knitr",
                  "xtable", "Zelig")

# Load packages
lapply(PackagesUsed, library,
        character.only = TRUE)

# Create package BibTeX file
knitr::write_bib(PackagesUsed,
                 file = "Packages.bib")
@

\noindent In the first executable line we just create our list of packages to load and cite. The next command is \texttt{lapply}\index{R function!lapply} (list apply). This applies the function \texttt{library} to all of the items in \emph{PackagesUsed}. \texttt{character.only = TRUE} is a \texttt{library}\index{R function!library} argument that allows us to use character string versions of the package names as R sees them in the \emph{PackagesUsed} vector, rather than as objects (how we have used \texttt{library} up until now). If you include these commands in a code chunk at the beginning of your knitted document, then you can be sure that you will have a BibTeX file with all of your packages.

The full LaTeX document example I showed you earlier uses the \texttt{LoadandCite} command\index{R function!LoadandCite} from the \emph{repmis} package. This simplifies the process of loading and citing R packages.\index{repmis}\footnote{It can also install the packages if the option \texttt{install = TRUE}. You can have it install specific package versions by entering the version numbers with the \texttt{versions} argument. This is very useful for enabling the replication of analyses that rely on specific package versions.}

\index{BibTeX|)}\index{LaTeX!bibliographies|)}\index{bibliography|(}

\section{Presentations with LaTeX Beamer}\label{latexBeamer}

\index{beamer|(}\index{LaTeX class!beamer|(}

You can make slideshow presentations with LaTeX. Creating a presentation with a markup language can take a bit more effort than using a WYSIWYG program like Microsoft PowerPoint\index{Microsoft PowerPoint} or Apple's Keynote.\index{Apple Keynote} However, combining LaTeX and \emph{knitr} can make fully reproducible presentations that dynamically create and present results. I have found this particularly useful in my teaching as dynamically produced presentations allow me to provide my students with fully replicable examples of how I created a figure on a slide, for example. \emph{knitr} also makes it easy to beautifully present code examples.

One of the most popular LaTeX tools for slideshows is the beamer class. When you compile a beamer class document, a PDF will be created where every page is a different slide (see Figure \ref{BeamerExample}). All major PDF viewer programs have some sort of ``View Full Screen'' option to view beamer PDFs as full screen slideshows. Usually you can navigate through the slides with the forward and back arrows on the keyboard.

In this section we will take a brief look at the basics of creating slideshows with beamer, highlighting special considerations that need to be made when working with beamer and \emph{knitr}. A full example of a knittable beamer presentation with illustrations of the many of the points discussed here is printed at the end of the chapter.

\begin{figure}
    \caption{Knitted Beamer PDF Example}
    \label{BeamerExample}
        \begin{center}
            \includegraphics[scale=0.5]{Children/Chapter11/images11/BeamerExample.png}
        \end{center}
        {\scriptsize The presentation in this example was created using a custom beamer theme available at: \url{https://GitHub.com/christophergandrud/Make-Projects/tree/master/Rnw_Lecture}.}
\end{figure}

\subsection{Beamer basics}

{\emph{knitr}} largely works the same way in LaTeX slideshows as it does in article or book class documents. There are a few differences to look out for.

\paragraph{The Beamer preamble}

You use \texttt{documentclass}\index{LaTeX command!documentclass} to set a LaTeX document as a \texttt{beamer} slideshow. You can also include global style information in the preamble by using the commands \texttt{usetheme},\index{LaTeX command!usetheme}\index{LaTeX command!usecolortheme}\index{LaTeX command!useinnertheme}\index{LaTeX command!useoutertheme} \texttt{usecolortheme}, \texttt{useinnertheme}, \texttt{useoutertheme}. For a fairly comprehensive compilation of beamer themes see the Hartwork's Beamer theme matrix: \url{http://www.hartwork.org/beamer-theme-matrix/}.

\paragraph{Slide frames}\index{LaTeX!beamer slides}

After the preamble, you start your document as usual by beginning the \texttt{document} environment.\index{LaTeX environment!document} Then you need to start creating slides. Individual beamer slides are created using the \texttt{frame}\index{LaTeX command!frame}\index{LaTeX environment!frame} environments. Create a frame title using \texttt{frametitle}.\index{LaTeX command!frametitle}

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}
    \begin{kframe}
        \begin{verbatim}
\frame{
        \frametitle{An example frame}


}
        \end{verbatim}
    \end{kframe}
\end{knitrout}

\noindent Note that you can also use the usual \verb|\begin{frame} . . \end{frame}| syntax. Unlike in a WYSIWYG slide show program, you will not be able to tell if you have tried to put more information on one slide than it can handle until after you compile the document.\footnote{One way to deal with frames that span multiple slides is to use the \texttt{allowframebreaks} command, i.e. \texttt{\textbackslash{}begin\{frame\}[allowframebreaks].\index{LaTeX command!allowframebreaks}}}

\paragraph{Title frames}\index{LaTeX!beamer title frames}

One important difference from a regular LaTeX article is that instead of using \texttt{maketitle} to place your title information, in beamer you place the \texttt{titlepage}\index{LaTeX command!titlepage} inside of a frame by itself.

\paragraph{Sections \& outlines}

We can use section\index{LaTeX command!section} commands in much the same way as we do in other types of LaTeX documents. Section commands do not need to be placed inside of frames. After the title slide, many slideshows have a presentation outline. You can automatically create one from your section headings using the \texttt{tableofcontents}\index{LaTeX command!tableofcontents} command. Like the \texttt{titlepage} command,\index{LaTeX command!titlepage} \texttt{tableofcontents} can go on its own frame, i.e.\index{LaTeX!table of contents}\index{LaTeX!outlines}

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}
    \begin{kframe}
        \begin{verbatim}
%%% Title slide
\frame{
    \titlepage
}

%% Table of contents slide
\frame{
    \frametitle{Outline}
        \tableofcontents
}
            \end{verbatim}
        \end{kframe}
\end{knitrout}

\paragraph{Make list items appear}\index{LaTeX!list appear}

Lists work the same way in beamer as they do in other LaTeX document classes. They do have an added feature in that you can have each item appear as you progress through the slide show. After \verb|\item|, place the number of the order in which the item should appear. Enclose the number in \verb|< ->|. For example,

<<Ch11ItemFadeIn, eval=FALSE>>=
\begin{itemize}
    \item<1-> The first item.
    \item<2-> The second item.
    \item<2-> The third item.
\end{itemize}
@

\noindent In this example the first item will appear before the next two. These two will appear at the same time.

\subsection{\emph{knitr} with LaTeX slideshows}

\emph{knitr} code chunks have the same syntax in LaTeX slideshows as in other LaTeX documents. You do need to make one change to the \texttt{frame} options, however, to include highlighted {\emph{knitr}} code chunks on your slides. You should add the \texttt{fragile} option to the \texttt{frame} command.\footnote{For a detailed discussion of why you need to use the \texttt{fragile} option with the \texttt{verbatim} environment\index{LaTeX environment!verbatim} that {\emph{knitr}} uses to display highlighted text in LaTeX documents see this blog post by Pieter Belmans: \url{http://pbelmans.wordpress.com/2011/02/20/why-latex-beamer-needs-fragile-when-using-verbatim/} (posted 20 February 2011).} Here is an example:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}
    \begin{kframe}
        \begin{verbatim}
\begin{frame}[fragile]
    \frametitle{An example fragile frame.}

\end{frame}
            \end{verbatim}
        \end{kframe}
\end{knitrout}

\noindent Here is a complete knittable beamer example:

{\scriptsize
\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
\textbackslash{}documentclass\{beamer\}

\textbackslash{}begin\{document\}

%% Title page inforamtion
\textbackslash{}title\{Example Beamer/\textbackslash{}emph\{knitr\} Slideshow\}
\textbackslash{}author\{\textbackslash{}href\{mailto:gandrud@hertie-school.org\}\{Christopher Gandrud\}\}

%%% Title slide
\textbackslash{}frame\{
    \textbackslash{}titlepage
\}

%% Table of contents slide
\textbackslash{}frame\{
    \textbackslash{}frametitle\{Outline\}
    \textbackslash{}tableofcontents
\}

%%% The code
\textbackslash{}section\{Access the code\}
\textbackslash{}begin\{frame\}[fragile]
    \textbackslash{}frametitle\{Access the code\}
        The code to create the following figure is available online.

        To access it we can type:
\textless{}\textless{}eval=FALSE\textgreater{}\textgreater{}=
\hlcom{# Access and run the code to create a caterpillar plot}
devtools::source\_url(\hlstr{"http://bit.ly/VRKphr"})
@
\textbackslash{}end\{frame\}

%%% The figure
\textbackslash{}section\{The Figure\}
\textbackslash{}begin\{frame\}[fragile]
    \textbackslash{}frametitle\{The resulting figure\}
\textless{}\textless{}echo=FALSE, message=FALSE, out.width='\textbackslash{}\textbackslash{}textwidth', out.height='0.8\textbackslash{}\textbackslash{}textheight'\textgreater{}\textgreater{}=
\hlcom{# Access and run the figure code}
devtools::source\_url(\hlstr{"http://bit.ly/VRKphr"})
@
\textbackslash{}end\{frame\}

\textbackslash{}end\{document\}

        \end{alltt}
\end{kframe}
\end{knitrout}
}

In Chapter \ref{MarkdownChapter} we will see how to use the \emph{rmarkdown} package to create beamer presentations with the much simpler Markdown syntax.

\index{beamer|)}\index{LaTeX class!beamer|)}

\subsection*{Chapter summary}

In this chapter we have learned the nitty-gritty of how to create simple LaTeX documents--articles and slideshows--that we can embed our reproducible research in using \emph{knitr}. In the next chapter we look at how to create more complex LaTeX documents, including theses, books, and batch reports.
