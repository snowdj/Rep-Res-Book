% Chapter Chapter 13 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 17 April 2015

<<set-parent13, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('Rep-Res-Parent.Rnw')
@

\chapter{Presenting on the Web and Other Formats with R Markdown}\label{MarkdownChapter}

LaTeX is the standard markup language for creating academic-quality articles and books. If we want to present research findings via the internet, our best option is HTML.\index{HTML} HTML syntax can be tedious to write, as we saw in Chapter \ref{TablesChapter}. Luckily the Markdown language was created as a simplified way of writing HTML documents. As we have seen, Markdown can be fully integrated with \emph{knitr}/\emph{rmarkdown} for creating reproducible research HTML presentation documents. In addition, the \emph{rmarkdown} package allows us to write documents in Markdown and render them to PDF and MS Word.

In this chapter we will learn about Markdown editors and the basic Markdown syntax for creating simple reproducible documents, including many of the things we covered for \emph{knitr}/LaTeX documents such as headings and text formatting. Please refer back to previous chapters for syntax used to display code and code chunks (Chapter \ref{StatsModel}), tables (Chapter \ref{TablesChapter}), and figures (Chapter \ref{FiguresChapter}) with R Markdown documents. In this chapter will also briefly look at some more advanced features for including math with MathJax, footnotes and bibliographies with Pandoc, and customizing styles with CSS. Then we will learn how to create HTML slideshows. We'll finish up the chapter by looking at options for publishing Markdown-created HTML documents, including locally on your computer, Dropbox, and GitHub Pages.

\section{The Basics}

\index{Markdown|(}

Markdown was created specifically to make it easy to write HTML (or XHTML\index{XHTML}\footnote{Extensible HyperText Markup Language}) using a syntax that is human readable and possibly publishable without compiling. For example, compare the Markdown table syntax in Chapter \ref{TablesChapter} to the HTML syntax for virtually the same table.\footnote{For more information see John Gruber's website: \url{http://daringfireball.net/projects/markdown/}.} That being said, to make Markdown simple, it does not have as many capabilities as HTML. To get around this problem you can still use HTML in Markdown, though note that Markdown syntax cannot be used between HTML element tags. Pandoc and \emph{rmarkdown} have extended Markdown so that it can be used to create reproducible PDF and MS Word documents.

\textbf{Note:} if you are using \emph{rmarkdown} to compile a document to PDF or Word, using raw HTML syntax will often not work as intended, if at all. As a rule, syntax specific to LaTeX or HTML that is included in an R Markdown document can only be properly compiled to a PDF or HTML document, respectively. Similarly, you are only able to include graphics that are of types supported by the output format. You are not be able to include a JavaScript\index{JavaScript} plot directly in a PDF.

\subsection{Getting started with Markdown editors}\index{Markdown!editors}

\begin{wrapfigure}{r}{0.3\textwidth}
    \caption{R Markdown Compile Dropdown Menu}
    \label{DropdowMarkdown}
    \begin{center}
        \includegraphics[scale=0.5]{Children/Chapter13/images13/rmarkdownOutputOptions.png}
    \end{center}
\end{wrapfigure}

Like for R LaTeX, RStudio\index{RStudio} functions as a very good editor for R Markdown documents and regular non-knittable Markdown documents as well. To create a new R Markdown document in RStudio, click \texttt{File} in the menu bar then \texttt{New} \textrightarrow{} \texttt{R Markdown}. You will then be able to select what output format you would like. RStudio has full syntax highlighting for code chunks and can compile \texttt{.Rmd} files into \texttt{.md}, then render them in \emph{.html}, for example, with one click of the \texttt{Knit HTML} button (\includegraphics[scale=0.5]{Children/Chapter13/images13/KnitHTML.png}). As we saw in Chapter \ref{GettingStartedRKnitr} (Figure \ref{NotebookExample}), when you knit a Markdown document in RStudio, it will preview the HTML document for you. You can always view HTML documents by opening them with your web browser. You can do this directly from RStudio's \textbf{Preview HTML}\index{RStudio!Preview HTML} window by clicking the \texttt{Open in Browser} button (\includegraphics[scale=0.45]{Children/Chapter10/images10/ShowInBrowser.png}).

If you click on the downward arrow next to \texttt{Knit HTML} you will see the drop-down menu in Figure \ref{DropdowMarkdown}. This allows you to also compile the document to PDF or MS Word, regardless of which format you originally chose when you created the document. As with HTML you will be given a preview of the PDF or Word document when it is compiled.

In Figure \ref{DropdowMarkdown} you'll also notice the question mark button. Click this for a quick guide to the Markdown syntax used in RStudio.

Being plain-text, you can also use any other text editor to modify Markdown documents, though they will lack the level of integration with \emph{knitr}/\emph{rmarkdown} that RStudio has.

\subsection{Preamble and document structure}

That was kind of a trick subsection title. Unlike LaTeX documents, plain Markdown documents do not have a preamble. \emph{rmarkdown} documents can have a header, basically another name for a preamble, but we will get to that later. There is also no need to start a body environment or anything like that. HTML head elements\index{HTML element!head} (HTMLs preamble equivalent) are added automatically when you render Markdown documents into HTML. So with Markdown, you can just start typing.

Here is an example of an R Markdown document that creates the map we saw in Chapter \ref{FiguresChapter}:\footnote{This code is available on GitHub at: \url{https://GitHub.com/christophergandrud/Rep-Res-Examples/blob/master/RMarkdownExamples/ExampleKnitrDocument/ExampleKnitrMarkdown.Rmd}.} We'll go through all of the code below.

<<Ch13FullExample, eval=FALSE, size='small'>>=
# Example R Markdown File
## from "Reproducible Research with R and RStudio"
### Christopher Gandrud
### 15 January 2015

-----------

```{r LoadPackages, include=FALSE}
# Load required packages
library(devtools)
```

We can use the
[googleVis](http://code.google.com/p/google-motion-charts-with-r/)
package to create interactive JavaScript tables, charts, and maps.
Here is an example of how to create a map with *googleVis*'s
`gvisGeoChart` function.

Let's first download some data from [GitHub](https://GitHub.com/).
See chapters 6 and 7 for details about this data as well as the
[variable description page](https://GitHub.com/christophergandrud/
Rep-Res-Examples/blob/master/DataGather_Merge/
MainData_VariableDescriptions.md).

-----------

## Fertilizer Consumption (kilograms per hectare of arable land) in 2003

### Data from [World Bank](http://data.worldbank.org/indicator/AG.CON.FERT.ZS)

```{r CreategvisGeoChart, echo=FALSE, message=FALSE, results='asis'}
# Create geo map of global fertilizer consumption for 2003
# The data is loaded from GitHub (http://bit.ly/V0ldsf)
## The data gathering process used to create this data set
## is completely reproducible. For more information see:
## http://bit.ly/YnMKBG
source_url("http://bit.ly/VNnZxS")
```

-----------


@

\noindent When knitted in RStudio and viewed in the Google Chrome web browser,\index{Google Chrome} the final presentation document looks like Figure \ref{MarkdownExampleFig}.

\begin{figure}
    \caption{Example Rendered R Markdown Document}
    \label{MarkdownExampleFig}
    \begin{center}
        \includegraphics[width=0.8\textwidth]{Children/Chapter13/images13/MarkdownExampleMap.png}
    \end{center}
\end{figure}


\subsection{Headings}\index{Markdown!headings |(}

Headings\label{MarkdownHeader} in Markdown are extremely simple. Note that Markdown headings and R Markdown headers are not the same thing. The latter gives instructions for how to render the document, the former are section titles in the text. To create a line in the topmost heading style--maybe a title--just place one hash mark (\verb|#|) at the beginning of the line. The second-tier heading gets two hashes (\verb|##|) and so on. You can also put the hash mark(s) at the end of the heading, but this is not necessary. Here is an example of the three headings:

<<Ch13header, eval=FALSE, tidy=FALSE, engine='sh'>>=
# A level one heading
## A level two heading
### A level three heading
@

\noindent There are six heading levels in Markdown. You can also create a level-one heading by following a line of text with equal signs. Level-two headings can be created by following a line of text with dashes:

<<Ch13headerLines, eval=FALSE, tidy=FALSE, engine='sh'>>=
A level one heading
===================

A level two heading
-------------------
@

\index{Markdown!headings |)}

\subsection{Horizontal lines}\index{Markdown!lines}

If you would like to create horizontal lines that run the width of the page in Markdown, simply place three or more equal signs or dashes separated by text from above by one blank line:

<<Ch13Lines, eval=FALSE, tidy=FALSE, engine='sh'>>=
Create a horizontal line.

=========
@

\subsection{Paragraphs and new lines}\index{Markdown!paragraphs}

Just like in LaTeX, new paragraphs are created by putting text on a new line separated from previous text with a blank line. For example:

<<Ch13NewLine, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is the first paragraph.

This is the second paragraph.
@

\noindent You might have noticed that in the headers example we did not need to separate the header with a blank line.

Separating lines with a blank line places\index{Markdown!new line} a blank line in the final document. End a line with two or more white spaces (  ) to create a new line that is not separated by a blank line.

\subsection{Italics and bold}\index{Markdown!italics}\index{Markdown!bold}

To \emph{italicize} a word in Markdown, simply place it between two asterisks, e.g. \verb|*Italicize these words*|. To make words \textbf{bold}, place them between four asterisks, two on either side: \verb|**Make these words bold**|.

\subsection{Links}\label{MarkdownLinks}\index{Markdown!hyper-links}

To create hyper-links in Markdown, use the \verb|[LINK_TEXT](URL)| syntax.\footnote{You can also include a \texttt{title} attribute after the URL, though this is generally not very useful. See Section \ref{TitleAttribute} for a discussion.} \verb|LINK_TEXT| is the text that you would like to show up as the hyper-link text. When you click on this text it will take you to the linked site specified by \texttt{URL}. If you want to show only a URL as the text, type it in both the square brackets and parentheses. This is a little tedious, so in RStudio you can just type the URL and it will be hyper-linked. In regular Markdown place the URL between less-than and greater-than signs (\verb|<URL>|).

\subsection{Special characters and font customization}\index{Markdown!special characters}

Unlike LaTeX rendered with pdfLaTeX\index{pdfLaTeX}, Markdown can include almost any letters and characters included in your system. The main exceptions are characters used by Markdown syntax (e.g. \verb|*|, \verb|#|, \verb|\| and so on). You will have to escape these (see below). Font sizes and typefaces cannot be set directly with Markdown syntax. You need to set these with HTML or CSS, which I don't cover here, though below we will look at how to use a custom CSS file.

\subsection{Lists}\index{Markdown!lists}

To create itemized lists in Markdown, simply place the items after one dash:

<<Ch13ItemizeList, eval=FALSE, tidy=FALSE, engine='sh'>>=
- Item 1
- Another item
- Item 3
@

\noindent To create a numbered list, use numbers and periods rather than dashes.

<<Ch13NumberedList, eval=FALSE, tidy=FALSE, engine='sh'>>=
1. Item 1
2. Another item
3. Item 3
@

\subsection{Escape characters}\index{Markdown!escape character}

Markdown, like LaTeX and R, uses a backslash (\verb|\|) as an escape character. For example, if you want to have an asterisk in the text of your document (rather than start to italicize your text, e.g. \verb|*some italicized text*|), type: \verb|\*|. Two characters--ampersand (\verb|&|)\index{Markdown!ampersand} and the less-than sign (\verb|<|)--\index{Markdown!less-than sign}have special meanings in HTML.\footnote{Ampersands declare the beginning of a special HTML character. Less-than signs begin HTML tags.} So, to have them printed literally in your text you have to use the HTML code for the characters. Ampersands are created with \verb|&amp|. Less-than signs are created with \verb|&lt|.

\index{Markdown|)}

\subsection{Math with MathJax}

\index{MathJax|(}

Markdown by itself can't format mathematical equations. We can create LaTeX-style equations by adding on the MathJax JavaScript\index{JavaScript} engine. MathJax syntax is the same as LaTeX syntax (see Section \ref{MathLaTeX}), especially when used from RStudio or when rendered with \emph{rmarkdown}. Markdown documents rendered in RStudio automatically link to the MathJax engine online.\footnote{You will not be able to render equations when you are not online.} If you want to use another program to render Markdown documents with MathJax equations, you may need to take extra steps to link to MathJax. For more details see: \url{http://docs.mathjax.org/en/latest/start.html#mathjax-cdn}.

Because backslashes are Markdown escape characters, in many Markdown editors you will have to use two backslashes to create math environments with MathJax. For example, in LaTeX and RStudio's\index{RStudio!Markdown math} Markdown you can create a display equation like this:

\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\]

\noindent by typing:\footnote{In RStudio you can also use dollar signs to delimit MathJax equations as in LaTeX. See the footnotes in Section \ref{MathLaTeX} for more information.}

<<Ch13Equation1, eval=FALSE, tidy=FALSE, engine='sh'>>=
\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\]
@

\noindent But, in other Markdown programs you may have to use:

<<Ch13Equation2, eval=FALSE, tidy=FALSE, engine='sh'>>=
\\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\\]
@

To make inline equations, use parentheses instead of square brackets as in LaTeX, e.g. \verb|\( s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1} \)|.

\index{MathJax|)}

\section{Further Customizability with \emph{rmarkdown}}\index{rmarkdown|(}

Markdown is simple and easy to use. But being simple means that it lacks important functionality for presenting research results, such as footnotes and bibliographies, and custom formatting. In this section we will learn how to overcome these limitations with Pandoc and CSS via \emph{rmarkdown}.

\subsection{More on \emph{rmarkdown} Headers}

In Chapter \ref{GettingStartedRKnitr} (page \pageref{rmardownHeader}) we first saw an \emph{rmarkdown} header written in YAML\index{YAML}. Just as a refresher, here is the basic header we looked at:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}\begin{kframe}
    \begin{alltt}
---
title: "A Basic PDF Presentation Document"
author: "Christopher Gandrud"
date: "30 November 2015"
output: pdf_document:
    toc: true
---
    \end{alltt}
\end{kframe}
\end{knitrout}

This header provides instructions for what to do when the document is rendered, gives instructions to render the document as a PDF (via LaTeX), and inserts a title, author, date, and table of contents at the beginning.

We also have the option to include other formatting options, many of which we would include in a \emph{knitr} LaTeX document's preamble.\index{LaTeX!preamble} You include these at the top level, i.e. without being tabbed. \emph{rmarkdown} refers to these options as ``metadata''.\index{rmarkdown!metadata} For example, to change the font size to 11-point we could use:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}\begin{kframe}
    \begin{alltt}
---
title: "A Basic PDF Presentation Document"
author: "Christopher Gandrud"
date: "30 November 2015"
output: pdf_document:
    toc: true
fontsize: 11pt
---
    \end{alltt}
\end{kframe}
\end{knitrout}

\noindent We could double-space the PDF document with a similar top-level entry: \texttt{linestretch: 2}.\footnote{1 would be for single space and 1.5 would be for one and a half spacing.} To find more options for PDF documents, type \texttt{?pdf\_document} into your R console. Note that these options will only affect your PDF document, not a rendered HTML file.

Remember from Chapter \ref{GettingStartedRKnitr} (page \pageref{rmarkdownRender}) that we can specify rendering instructions for multiple output formats in the same header. Here is a longer header, building on what we just saw. We'll go through it in detail:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{1, 1, 1}
    \color{fgcolor}\begin{kframe}
    \begin{alltt}
---
title: "An Example rmarkdown Article"
author: "Christopher Gandrud"
date: "15 January 2015"
output:
    pdf_document:
        latex_engine: xelatex
        number_sections: yes
        toc: yes
    html_document:
        toc: no
        theme: "flatly"
linestretch: 2
fontsize: 11pt
bibliography:
    - Main.bib
    - Packages.bib
---
    \end{alltt}
\end{kframe}
\end{knitrout}

\noindent Ok, let's go through this in detail. We have already seen the \texttt{title}, \texttt{author}, \texttt{date}, \texttt{linestretch}, and \texttt{fontsize} options. Notice that we used \texttt{latex\_engine} to set the LaTeX engine to XeLaTeX, which is useful for documents that include non-standard English characters.\index{XeLaTeX} We also specified with \texttt{number\_sections} that the PDF document should have numbered section headings.

For the HTML version of the document we do not want a table of contents as we set \texttt{toc: no}. We specified a CSS\index{CSS} theme called Flatly for our HTML document using \verb|theme: "flatly"|. As of this writing, \emph{rmarkdown} has a built-in ability to use a range of themes from Bootswatch (\url{http://bootswatch.com/}). Alternatively, you can link to a custom CSS file with the \texttt{css} option. Use \texttt{html\_document} to see other options. Notice that we can use \texttt{no} and \texttt{yes} instead of \texttt{false} and \texttt{true}, respectively.

We linked to two BibTeX files with the \texttt{bibliography} option. Using Pandoc syntax, the references will apply to both the PDF and HTML documents.

If you want to also enable the creation of a Microsoft Word document, include \verb|output: word_document| in the header.

\index{Pandoc!bibliographies}\index{Markdown!bibliographies}

\begin{table}
    \caption{A Selection of Pandoc In-text Citations}
    \begin{center}
        \label{PandocCitations}
        \begin{tabular}{l l}
            \hline
            Markup & Result \\[0.25cm] \hline\hline
            \texttt{[@Donoho2009]} & (Donoho 2009) \\[0.25cm]
            \texttt{[-@Donoho2009]} & (2009) \\[0.25cm]
            \texttt{[see @Donoho2009]} & (see Donoho 2009) \\[0.25cm]
            \texttt{[see @Donoho2009, 10-11]} & (see Donoho 2009, 10--11) \\[0.25cm]
            \texttt{[@Donoho2009; @Box1973]} & (Donoho 2009; Box 1973) \\[0.25cm]
            \texttt{@Donoho2009 [10-11]} & Donoho (2009, 10--11) \\[0.25cm]
            \hline
        \end{tabular}
    \end{center}
\end{table}

\paragraph{Bibliographies with Pandoc}\index{bibliography |(}

Pandoc via \emph{rmarkdown} allows us to insert citations from normal BibTeX files (see Chapter \ref{LatexChapter}) specified in the header with \texttt{bibliography}. The main difference is that Pandoc has a different syntax from LaTeX for making in-text citations. Basic Pandoc citations begin with \verb|@| followed by the BibTeX citation key. Square brackets (\verb|[]|) create parentheses around the citation. Here is an example:

<<Ch13BibTeXCite, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is a citation [@Donoho2009].
@

\noindent Pandoc uses \emph{natbib}\index{LaTeX package!natbib}\index{bibliography}\index{in-text citation} by default, so the citation \verb|[@Donoho2009]| will appear as (Donoho et al., 2009). To add text before and after the citation inside of the parentheses, use something like this: \verb|[see @Donoho2009, 10]|; which creates: (see Donoho et al. 2009, 10). If you do not want the parentheses around the entire citation (only the year) then omit the square brackets. To include only the year and not the authors' surnames, add a minus sign, e.g. \verb|[-@Donoho2009]|. See Table \ref{PandocCitations} for more options.

Full bibliographic information for each item that is cited in the text will be produced at the end of the output document. I suggest placing a heading like \verb|# References| at the very end of your document so that the bibliography will be differentiated from the document's text.

\index{bibliography |)}

\paragraph{Footnotes with Pandoc}\index{Pandoc!footnotes}\index{Markdown!footnotes}

You can also include footnotes in documents rendered with \emph{rmarkdown} by using Pandoc's footnote syntax. In the text where you would like a footnote to be located use: \verb|[^NOTE_KEY]|. Then at the end of your document, place \verb|[^NOTE_KEY]: The footnote text|.\footnote{You can actually put this almost anywhere and it will be placed and numbered correctly in the output document, but I find it easier to organize the footnotes when they are placed at the end.} \texttt{NOTE\_KEY}s generally follow the same rules as BibTeX citation keys, so no spaces. The footnotes will be numbered sequentially when rendered.

To sum up, here is an example of document that can be rendered in HTML or PDF using \emph{rmarkdown}. It includes footnotes and a bibliography.

<<Ch13PandocDoc, eval=FALSE, tidy=FALSE>>=
---
title: "Minimal rmarkdown Example"
output:
    pdf_document:
        toc: true
    html_document:
        toc: false
bibliography: Main.bib
---

This is some text.[^FirstNote]

This is a *knitr* code chunk:

```{r}
plot(cars$speed, cars$dist)
```

This is a citation [see @Donoho2009, 10].

[^FirstNote]: This is a footnote.

# References
@

We have only covered a small proportion of Pandoc's capabilities that you can take advantage of with \emph{rmarkdown}. For full range of Pandoc's abilities see: \url{http://johnmacfarlane.net/pandoc/README.html}.

\subsection{CSS style files and Markdown}\index{CSS|(}

You can customize the formatting of HTML documents created with Markdown files using custom CSS style sheets. CSS files allow you to specify the way a rendered Markdown file looks in a web browser including fonts, margins, background color, and so on. We don't have space to cover CSS syntax here. There are numerous online resources for learning CSS. One of the best ways may be to just copy a CSS style sheet into a new file and play around with it to see how things change. A really good resource for this is Google Chrome's Developer Tools.\index{Google Chrome!Developer Tools} The Developer Tools allows you to edit your webpages, including their CSS, and see a live preview. It is a really nice way to experiment with CSS (and HTML and JavaScript).\index{HTML}\index{JavaScript}\footnote{For more information on how to access and use Developer Tools in Chrome see: \url{https://developers.google.com/chrome-developer-tools/}.} There are also numerous pre-made style sheets available online.\footnote{One small note: when you create a new style sheet or copy an old one, make sure the final line is blank. Otherwise you may get an ``incomplete final line'' error when you render the document.}

\index{Markdown!custom CSS|(}

\paragraph{Rendering R Markdown files to HTML using custom CSS}

The simplest way to use a custom CSS style sheet is to include the file path to the CSS file in an \emph{rmarkdown} header. As mentioned earlier, \emph{rmarkdown} has a number of built-in CSS file options that you can access with \texttt{style}. If you want to use another custom CSS file, use the \texttt{css} option. If our custom CSS file is called \emph{Markdown.css} in the same directory as the R Markdown document, then a basic header would be:

<<Ch13CSSheader, eval=FALSE>>=
---
output:
    html_document:
        css: Markdown.css
---
@

If you are using the \emph{knitr} package to render an R Markdown document to HTML you can also include a custom CSS file. First use \texttt{knit} to knit the document to a plain Markdown file. Then use the \texttt{markdownToHTML}\index{R function!markdownToHTML} function from the \emph{markdown} package \citep{R-markdown} to render the plain Markdown document in HTML, including the \texttt{stylesheet} argument with the path to the CSS file.

\index{Markdown!custom CSS|(}

\index{CSS|(}


%%%%%%%%%%%%% Presentations %%%%%%%%%%%%%%%%%%
\section{Slideshows with Markdown, \emph{rmarkdown}, and HTML}

Because R Markdown documents can be compiled into HTML files it is possible to use them to create HTML5\index{HTML5} slideshows.\footnote{The slideshows created by the tools in this section use features introduced in the 5th version of HTML, i.e. HTML5. In this section I often refer to HTML5 as just HTML for simplicity.} There are a number of advantages to creating HTML presentations with Markdown:

\begin{itemize}
    \item You can use the relatively simple Markdown syntax.
    \item HTML presentations are a nice native way to show content on the web.
    \item HTML presentations can incorporate virtually any content that can be included in a webpage. This includes interactive content, like motion charts created by \emph{googleVis}\index{googleVis} (see Chapter \ref{FiguresChapter}).
\end{itemize}


\noindent Let's look at how to create HTML slideshows from Markdown documents using (a) the \emph{rmarkdown} package and (b) RStudio's built-in slideshow files, called R Presentations. You can also use \emph{rmarkdown} to create beamer\index{beamer} presentations.

\paragraph{HTML5 frameworks}

Before getting into the details of how to use \emph{rmarkdown} for presentations and R Presentations, let's briefly look more into what an HTML5\index{HTML5} slideshow is and the frameworks that make them possible. HTML5 slideshows rely on a number of web technologies in addition to HTML5, including CSS,\index{CSS} and JavaScript\index{JavaScript} to create a website that behaves like a LaTeX beamer\index{beamer} or PowerPoint\index{PowerPoint} presentation. They run in your web browser and you may need to be connected to the internet for them to work properly as key components are often located remotely. Most browsers have a \texttt{Full Screen} mode you can use to view presentations.

There are a number of different HTML5 slideshow frameworks that let you create and style your slideshows. In all of the frameworks you view the slideshow in your web browser and advance through slides with the forward arrow key on your keyboard. You can go back with the back arrow. Despite these similarities, the frameworks have different looks and capabilities.


%%%%%%%%%%%%%% rmarkdown Presentations Presentations %%%%%%%%

\subsection{HTML Slideshows with \emph{rmarkdown}}

It is very easy to create an HTML presentation using \emph{rmarkdown} and the IO Slides\index{IO Slides}\index{io2012}\footnote{\url{https://code.google.com/p/io-2012-slides/}} or Slidy\index{slidy}\footnote{\url{http://www.w3.org/Talks/Tools/Slidy2/#(1)}} HTML5 frameworks. The syntax for IO Slides and Slidy presentations with \emph{rmarkdown} presentations is almost exactly the same as the syntax we have seen throughout this chapter. There are two main differences from the syntax we have seen so far. First, \verb|ioslides_presentation| for IO Slides or \verb|slidy_presentation| for Slidy presentations is the output type to set in the header. Second, two hashes (\verb|##|) set a frame's header.\footnote{You can create sections with one hash.} For example,

<<Ch13ioslidesSimple, eval=FALSE>>=
---
title: "Simple rmarkdown Presentation Example"
author: "Christopher Gandrud"
date: "26 December 2015"
output:
    ioslides_presentation:
        incremental: true
---

## Access the code

The code to create the following figure is available online.
@

\noindent This code creates a slide show that begins with the slide in Figure \ref{BasicIO}. Bullet points will be brought in incrementally because we used \verb|incremental: true| under \verb|output: ioslides_presentation|. Bullets are created using Markdown list syntax.

\begin{figure}
    \caption{\emph{rmarkdown}/IO Slides Example Title Slide}
    \label{BasicIO}
    \begin{center}
        \includegraphics[scale=0.3]{Children/Chapter13/images13/rmarkdownIo_slidesExample.png}
    \end{center}
\end{figure}

Use three dashes (\verb|---|) to delineate a new slide without a header. You can style the presentation further using the \texttt{css} option in the header to link to a custom CSS file.\index{CSS}

You can create a new IO Slides or Slidy \emph{rmarkdown} presentation in RStudio by selecting \texttt{File} \textrightarrow\: \texttt{R Markdown...} then \texttt{Presentation} in the menu on the left of the window (shown in Figure \ref{rmarkdownPresRStudio}). Finally, click \texttt{HTML (ioslides)} or \texttt{HTML (Slidy)}.


\begin{figure}
    \caption{Create New \emph{rmarkdown} Presentation in RStudio}
    \label{rmarkdownPresRStudio}
    \begin{center}
        \includegraphics[scale=0.5]{Children/Chapter13/images13/rmarkdownPresRStudio.png}
    \end{center}
\end{figure}

\subsection{LaTeX Beamer Slideshows with \emph{rmarkdown}}\label{rmarkdownBeamer}

\index{beamer|(}\index{LaTeX class!beamer|(}

As we saw in Chapter \ref{LatexChapter}, creating a presentation with LaTeX beamer involves rather convoluted syntax. Luckily, we can use \emph{rmarkdown} to create beamer presentations using much cleaner Markdown syntax.

An \emph{rmarkdown} beamer presentation uses the same syntax that we just saw with HTML presentations. The main difference is in the header where we use \verb|output: beamer_presentation|. You create a new R Markdown beamer document in RStudio in a similar way as IO Slides or Slidy. The only difference is that we select \texttt{PDF (Beamer)} in the window shown in Figure \ref{rmarkdownPresRStudio}. As before, frame titles are delineated with two hashes (\verb|##|). You can mark sections in much the same way with one hash. In the header you can switch the beamer theme, font theme, and color theme with \texttt{theme}, \texttt{colortheme}, and \texttt{fonttheme}, respectively. For example, to create the slide show that begins with the slide in Figure \ref{rmarkdownBeamerExample}:\index{LaTeX command!usetheme}\index{LaTeX command!usecolortheme}\index{LaTeX command!usefonttheme}

<<Ch13BeamerHeader, eval=FALSE>>=
output:
    beamer_presentation:
        incremental: true
        theme: "Bergen"
        colortheme: "crane"
        fonttheme: "structurebold"
@

\noindent Note that themes are placed in quotation marks. You can also include a custom template with the \texttt{template} option followed by the path to the custom template file.

\index{beamer|)}\index{LaTeX class!beamer|)}

\index{rmarkdown|)}

\begin{figure}
    \caption{\emph{rmarkdown}/Beamer Example Title Slide}
    \label{rmarkdownBeamerExample}
    \begin{center}
        \includegraphics[scale=0.45]{Children/Chapter13/images13/rmarkdownBeamerExample.png}
    \end{center}
\end{figure}

%%%%%%%%%%%%%% RStudio Presentations Presentations %%%%%%%%
\subsection{Slideshows with Markdown and RStudio's R Presentations}

Another easy, but less customizable way to create HTML slideshows is with RStudio's R Presentation\index{R Presentation}\index{RStudio!R Presentation} documents. To get started, open RStudio and click \texttt{File} \textrightarrow \: \texttt{New} \textrightarrow \: \texttt{R Presentation}. RStudio will then ask you to give the presentation a name and save it in a particular file. The reason RStudio does this is because an R Presentation is not just one file. Instead it includes:

\begin{itemize}
    \item A \emph{.Rpres}\index{Rpres} file, which is very similar to a \emph{knitr} Markdown \emph{.Rmd} file.
    \item A \emph{.md} Markdown file created from the \emph{.Rpres} file.
    \item \emph{knitr} cache and figure folders, also created from the \emph{.Rpres} file.
\end{itemize}

\paragraph{Editing and compiling the presentation}

You change the presentation's content by editing the \emph{.Rpres} file using the normal \emph{knitr} Markdown syntax we've covered. The only difference is how you create new slides. Luckily, the syntax for this is very simple. Just type the slide's title then at least three equal signs (\verb|===|). For example,

<<Ch13RPresTitle, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is an Example .Rpres Slide Title
===
@

\noindent The very first slide is automatically the title slide and will be formatted differently from the rest.\footnote{As of this writing it is a blue slide with white letters.} Here is an example of a complete \emph{.Rpres} file:

<<Ch13RPresFullExample, eval=FALSE, tidy=FALSE>>=
Example R Presentation
===

## Christopher Gandrud

## 1 July 2015

Access the Code
===

The code to create the following figure is available online.

To access it we type:

```{r, eval=FALSE}
# Access and run the code to create a caterpillar plot

devtools::source_url("http://bit.ly/VRKphr")
```

Caterpillar Plot
===

```{r, echo=FALSE, message=FALSE}
# Access and run the code to create a caterpillar plot

devtools::source_url("http://bit.ly/VRKphr")
```

Fertilizer Consumption Map (2003)
===

```{r CreategvisGeoMap, echo=FALSE, message=FALSE, results='asis'}
# Create geo map of global fertilizer consumption for 2003
devtools::source_url("http://bit.ly/VNnZxS")
```
@

\noindent This example includes four slides and three code chunks. The last code chunk uses the \emph{googleVis}\index{googleVis} package to create the global map of fertilizer consumption we saw earlier in Figure \ref{GeoMapImage}. Because the slideshow we are creating is in HTML, the map will be fully dynamic. Note that like before you will not be able to see the map in the RStudio preview, only in a web browser.

To compile the slideshow, either click the \texttt{Preview} button (\includegraphics[scale=0.35]{Children/Chapter13/images13/PreviewButton.png}) or save the \emph{.Rpres} document. When you do this, you can view your updated slideshow in the \emph{Presentation} pane.\index{RStudio!Presentation pane} For example, see Figure \ref{PresentPane}. You can navigate through the slideshow using the arrow buttons at the bottom right of the \emph{Presentation} pane. If you click the magnifying glass icon (\includegraphics[scale=0.35]{Children/Chapter13/images13/MagGlass.png}) at the top of the \emph{Presentation} pane you will get a much larger view of the slideshow. You can also view the slideshow in your web browser by clicking on the \texttt{More} icon (\includegraphics[scale=0.35]{Children/Chapter13/images13/MorePres.png}), then \texttt{View in Browser}.

\paragraph{Publishing slideshows}

You can of course, view your slideshows locally. To share your presentation with others, you probably want to either publish the presentation to a standalone HTML file and host it, for example, on a Dropbox\index{Dropbox} \emph{Public}\index{Dropbox!Public folder} folder or publish it directly to RPubs.\index{RPubs} For R Presentations, create a standalone HTML file by simply clicking the \texttt{More} button in the \emph{Presentation} pane, then \texttt{Save as Webpage...}. Under the \texttt{More} button you can also choose the option \texttt{Publish to RPubs...}.

\begin{figure}
    \caption{RStudio R Presentation Pane}
    \label{PresentPane}
    \begin{center}
        \includegraphics[width=\textwidth]{Children/Chapter13/images13/PresentationPane.png}
    \end{center}
\end{figure}


\section{Publishing HTML Documents Created by R Markdown}

In Chapter \ref{GettingStartedRKnitr} (Section \ref{PublishRPubs}) we saw how to publish other R Markdown documents compiled with RStudio to RPubs. The \emph{knitr} function \texttt{knit2wp} can be used to post a knitted Markdown file to WordPress\footnote{\url{http://wordpress.com}} sites, which are often used for blogging.\index{knitr!knit2wp}\index{WordPress} In this section we will look at two other ways to publish R Markdown documents using Dropbox and GitHub.

\subsection{Standalone HTML files}

Of course, you can simply open the HTML file rendered from any R Markdown document in your web browser. If the HTML file contains the full information for the page as they generally do when created by \emph{rmarkdown}, e.g. the file does not depend on any auxiliary files, you can simply share this file via email or whatnot and anyone with a web browser can open it. We can Of course, also send auxiliary files if need be, but this can get unwieldy.

\subsection{Hosting webpages with Dropbox}\index{Dropbox!Public folder}

Probably one of the easiest ways to host an HTML file created with R Markdown is on your Dropbox \emph{Public} folder.\footnote{See Section \ref{EnablePublicFolder} for instructions on how to enable this folder if you created your Dropbox account after 4 October 2012.} Any HTML file Slideshows in the \emph{Public} folder will be rendered and widely accessible simply by entering the public link into a web browser.

\subsection{GitHub Pages}\index{GitHub!Pages}\index{GitHub}

GitHub also offers a free hosting service for webpages. These can be much more complex than a single HTML file. The simplest way to create one of these pages is to create a repository with a file called \emph{README.Rmd}. You can \texttt{knit} this file and then create your GitHub Page with it. To do this, go to the \texttt{Settings} \textrightarrow{} \texttt{GitHub Pages} on your repository's main GitHub website. Then click \texttt{Automatic Page Generator}. This places the contents of your \emph{README.md} file in the page and provides you with formatting options. Click \texttt{Publish} and you will have a new website.

Clicking \texttt{Publish} creates a new orphan branch\footnote{An orphan branch is a branch with a different root from other repository branches. Another way of thinking about this is that they have their own history.}\index{Git!orphan branch} called \emph{gh-pages}.\index{GitHub!gh-pages branch} When these branches are pushed to GitHub it will create a website based on a file called \emph{index.html} that you include in the branch. This will be the website's main page.

If you want to create more customized and larger websites with GitHub Pages, you can manually create a GitHub Pages orphan branch and push it to GitHub. This is essentially what \emph{slidify} did for us with its \texttt{publish}\index{R function!publish} command. Imagine we have our working directory set as a repository containing an R Markdown file that we have rendered into an HTML file called \emph{index.html}.\index{HTML} Let's create a new orphan branch:

<<Ch13GHPages1, eval=FALSE, tidy=FALSE, engine='sh'>>=
# Create orphan gh-pages branch
git checkout --orphan gh-pages
@

\noindent Now \texttt{add}\index{Git command!add} the files, \texttt{commit}\index{Git command!commit} the changes and \texttt{push}\index{Git command!push} it to GitHub. Push it to the \emph{gh-pages} branch like this:

<<Ch13GHPages2, eval=FALSE, tidy=FALSE, engine='sh'>>=
# Add files
git add .

# Commit changes
git commit -am "First gh-pages commit"

# Push branch to GitHub Pages
git push origin gh-pages
@

\noindent A new webpage will be created at: \emph{USERNAME.GitHub.io/REPO\_NAME} You can also add custom domain names. For details see: \url{https://help.GitHub.com/articles/setting-up-a-custom-domain-with-GitHub-pages/}.

\subsection{Further information on R Markdown}

We have covered many of the core capabilities of \emph{rmarkdown} for creating reproducible research documents. Please see RStudio's R Markdown documentation (\url{http://rmarkdown.rstudio.com/}) for even more information. Another tool to look into for interactive results presentation is the \emph{shiny} package \citep{R-shiny}.\index{shiny} It gives R the capability to create interactive web applications,\index{web application} not just the static websites that we have covered in this chapter. This package is well integrated with RStudio. For more information please see: \url{http://shiny.rstudio.com/}.

\subsection*{Chapter summary}

In this chapter we learned a number of tools for dynamically presenting our reproducible research on the web as well as how to create PDFs with the simple R Markdown syntax. Though LaTeX and PDFs will likely remain the main tools for presenting research in published journals and books for some time to come, choosing to also make your research available in online native formats can make it more accessible to general readers. It also allows you to take advantage of interactive tools for presenting your research. \emph{rmarkdown} also makes it easy to create documents in a variety of formats using the simple R Markdown format. For relatively simple documents this can be a very useful tool.
