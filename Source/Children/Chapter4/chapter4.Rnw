% Chapter Chapter 4 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 16 March 2016

<<set-parent4, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('Rep-Res-Parent.Rnw')
@

\chapter{Getting Started with File Management}\label{DirectoriesChapter}

Careful file management is crucial for reproducible research. Remember two of the guidelines from Chapter \ref{GettingStartedRR}:

\begin{itemize}
    \item Explicitly tie your files together.
    \item Have a plan to organize, store, and make your files available.
\end{itemize}

\noindent Apart from the times when you have an email exchange (or even meet in person) with someone interested in reproducing your research, the main information independent researchers have about the procedures is what they access in files you make available: data files, analysis files, and presentation files. If these files are well organized and the way they are tied together is clear, replication will be much easier. File management is also important for you as a researcher, because if your files are well organized you will be able to more easily make changes, benefit from work you have already done, and collaborate with others.

Using tools such as R, {\emph{knitr}}/\emph{rmarkdown}, and markup languages like LaTeX requires fairly detailed knowledge of where files are stored in your computer. Handling files to enable reproducibility may require you to use command-line tools to access and organize your files. R and Unix-like shell programs\index{Unix-like shell program}\index{command-line} allow you to control files--creating, deleting, relocating--in powerful and really reproducible ways. By typing these commands you are documenting every step you take. This is a major advantage over graphical user interface-type systems where you organize files by clicking and dragging them with the cursor. However, text commands require you to know your files' specific addresses--their file paths.\index{file path}

In this chapter we discuss how a reproducible research project may be organized and cover the basics of file path naming conventions\index{file path naming conventions} in Unix-like operating systems, such as Mac OS X and Linux, as well as Windows. We then learn how to organize them with RStudio Projects\index{RStudio!Projects}. Finally, we'll cover some basic R and Unix-like shell commands for manipulating files as well as how to navigate through files in RStudio in the {\emph{Files}} pane. The skills you will learn in this chapter will be heavily used in the next chapter (Chapter \ref{Storing}) and throughout the book.

In this chapter we work with locally stored files\index{locally stored}, i.e. files stored on your computer. In the next chapter we will discuss various ways to store and access files remotely stored in the cloud.\index{remotely stored}\index{cloud storage}


\section{File Paths \& Naming Conventions}

All of the operating systems\index{operating systems} covered in this book organize files in hierarchical directories\index{directories}, also known as file trees. To a large extent, directories can be thought of as the folders you usually see on your Windows or Mac desktop.\footnote{To simplify things, I use the terms `directory' and `folder' interchangeably in this book.} They are called hierarchical because directories\index{hierarchical directories} are located inside of other directories, as in Figure \ref{ExampleTree}.

\subsection{Root directories}

A root directory\index{root directory} is the first level in a disk, such as a hard drive. It is the root out of which the file tree `grows'.\index{file tree} All other directories are subdirectories\index{subdirectory} of the root directory.

On Windows computers you can have multiple root directories, one for each storage device or partition of a storage device. The root directory is given a drive letter assignment\index{drive letter assignment}. If you use Windows regularly you will most likely be familiar with \texttt{C:\textbackslash{}} used to denote the C partition of the hard drive. This is a root directory. On Unix-like systems, including Macs and Linux computers, the root directory is simply denoted by a forward slash (\texttt{/}) with nothing before it.

\subsection{Subdirectories \& parent directories}

You will probably not store all of your files in the root directory. This would get very messy. Instead you will likely store your files in subdirectories of the root directory. Inside of these subdirectories may be further subdirectories and so on. Directories inside of other directories are also referred to as child directories\index{child directory} of a parent directory\index{parent directory}.

On Windows computers separate subdirectories are indicated with a back slash (\textbackslash{}). For example, if we have a folder called {\emph{Data}} inside of a folder called {\emph{ExampleProject}} which is located in the C root directory it has the address \texttt{C:\textbackslash{}ExampleProject\textbackslash{}Data}.\footnote{For more information on Windows file path names see this helpful website: \url{http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx}} When you type Windows file paths into R you need to use two backslashes rather than one: e.g. \verb|C:\\ExampleProject\\Data|. This is because the \texttt{\textbackslash{}} is an escape character\index{escape character} in R.\footnote{As we will see in Part IV, it is also a LaTeX and Markdown escape character.} Escape characters tell R to interpret the next character or sequence of characters differently. For example, in Section \ref{TSVEscape} you'll see how \texttt{\textbackslash{}t} can be interpreted by R as a tab rather than the letter ``t''. Add another escape character to neutralize the escape character so that R interprets it as a backslash. In other words, use an escape character to escape the escape character. Another option for writing Windows file names in R is to use one forward slash (\texttt{/}).

On Unix-like systems, including Mac computers, directories are indicated with a forward slash (\texttt{/}). The file path of the {\emph{Data}} file on a Unix-like system would be: \texttt{/ExampleProject/Data}. Remember that a forward slash with nothing before it indicates the root directory. So \texttt{/ExampleProject/Data} has a different meaning than \texttt{ExampleProject/Data}. In the former, \emph{ExampleProject} is a subdirectory of the root. In the latter, \emph{ExampleProject} is a subdirectory of the current working directory (see below for details about working directories). This is also true in Windows.

In this chapter I switch between the two file system naming conventions to expose you to both. For the remainder of the book I use Unix-like file paths. When you use relative paths, these will work across operating systems in R. We'll get to relative paths in a moment.

\subsection{Working directories}

When you use R, markup languages, and many of the other tools covered in this book, it is important to keep in mind what your current working directory is\index{working directory}.\index{current working directory} The working directory is the directory where the program automatically looks for files and other directories, unless you tell it to look elsewhere. It is also where it will save files. Later in this chapter we will cover commands for finding and changing the working directory.

\subsection{Absolute vs. relative paths}

For reproducible research, collaborative research, and even if you ever change the computer you work on, it is a good idea to use relative rather than absolute file paths.\index{file path!relative}\index{file path!absolute} Absolute file paths give the entire path of a given file or directory on a specific system. For example, \texttt{/ExampleProject/Data} is an absolute path as it specifies the path of the \emph{Data} child directory all the way back to the root directory. However, if our current working directory is \emph{ExampleProject} and we want to link to the \emph{Data} child directory or a file in it, we don't need the absolute path. We could simply use \texttt{Data/}, i.e. the path relative to the working directory.

It is good practice to use relative paths when possible and organize your files such that using relative paths is easy. This makes your code less dependent on the particular file structure of a particular computer. For example, imagine you use \texttt{C:\textbackslash{}\textbackslash{}ExampleProject\textbackslash{}\textbackslash{}Data} in your source code to link to the \emph{Data} directory. Someone--a collaborator, a researcher reproducing your work, or even you--then tries to run the code on a different computer. The code will break if they are, for instance, using a Unix-like system or have placed \emph{ExampleProject} in a different partition of their hard drive. This can be fixed relatively straightforwardly by changing the file path in the source. However, this is tedious (often not well documented) and unnecessary if you use relative file paths.

\subsection{Spaces in directory \& file names}

It is generally good practice to avoid putting spaces in your file and directory names. For example, I called the example project parent directory ``ExampleProject'' rather than ``Example Project''. Spaces in file and directory names can sometimes create problems for computer programs trying to read the file path. The program may believe that the space indicates that the path name has ended. To make multi-word names easily readable without using spaces, adopt a convention such as CamelBack\index{CamelBack}. In CamelBack new words are indicated with capital letters, while all other letters are lower case. For example, ``ExampleProject''.

\begin{figure}[th!]
    \caption{Example Research Project File Tree}
    \label{ExampleTree}
        \begin{center}
            \input{Children/Chapter4/images4/ExampleFilePath.tex}
        \end{center}
\end{figure}

\section{Organizing Your Research Project}

Figure \ref{ExampleTree} gives an example of how the files in a simple reproducible research project could be organized. The project's parent directory is called {\emph{ExampleProject}}. Inside this directory are the primary knittable documents (\emph{Paper.Rnw} \emph{Slideshow.Rnw}, and \emph{Website.Rmd}). In addition there is an \emph{Analysis} sub-directory with the R files to run the statistical analyses followed by a further \emph{Data} child directory.

The nested file structure allows you to use relative file paths. The knittable documents can call \emph{Analysis1.R} with the relative path \emph{Analysis/Analysis1.R}, which in turn could call a file in the \emph{Data/} subdirectory. If all of the directories were at the same level of the file tree then you would need to use absolute file paths.\index{file path!absolute}\index{file path!relative}

\begin{wrapfigure}{r}{0.4\textwidth}
    \caption{An Example RStudio Project Menu}
    \label{ProjectMenu}
    \begin{center}
        \includegraphics[width=0.3\textwidth]{Children/Chapter4/images4/ProjectMenu.png}
    \end{center}
\end{wrapfigure}

In addition to the main files and subdirectories in {\emph{ExampleProject}} you will probably notice a file called {\emph{README.md}}. The {\emph{README.md}} file\index{README file} gives an overview of all the files in the project. It should briefly describe the project including things like its title, author(s), topic, any copyright information, and so on. It should also indicate how the folders in the project are organized and give instructions for how to reproduce the project. The README file should be in the main project folder--in our example this is called {\emph{ExampleProject}}--so that it is easy to find. If you are storing your project as a GitHub\index{GitHub} repository (see Chapter \ref{Storing}) and the file is called \emph{README}, its contents will automatically be displayed on the repository's main page. If the \emph{README} file is written using Markdown (e.g. \emph{README.md}), it will also be properly formatted. Figure \ref{BookRepository} shows an example of this.

It is good practice to dynamically include the system information for the R session you used to create the project. To do this you can write your README file with R Markdown. Simply include the \texttt{sessionInfo()}\index{R function!sessionInfo} command in a \emph{knitr} code chunk in the R Markdown document. If you knit this file immediately after knitting your presentation document, it will record the information for that session.

You can also dynamically include session info in a LaTeX document. To do this, use the {\tt{toLatex}} command in a code chunk. The code chunk should have the option \verb|results='asis'|. The code is:

<<Ch4SessionInfoLatex, eval=FALSE, echo=TRUE>>=
toLatex(sessionInfo())
@

\section{Setting Directories as RStudio Projects}

If you are using RStudio, you may want to organize your files as Projects\index{RStudio!Projects}.\label{CreateRStudioProject} You can turn a normal directory into an RStudio Project by clicking on \texttt{File} in the RStudio menu bar and selecting \texttt{New Project\ldots}. A new window will pop-up. Select the option \texttt{Existing Directory}. Find the directory you want to turn into an RStudio Project by clicking on the \texttt{Browse} button. Finally, select \texttt{Create Project}. You will also notice in the Create Project pop-up window that you can build new project directories and create a project from a directory already under version control\index{version control} (we'll do this at the end of Chapter \ref{Storing}). When you create a new project you will see that RStudio has put a file with the extension \texttt{.Rproj} into the directory.

Making your research project directories RStudio Projects is useful for a number of reasons:

\begin{itemize}
    \item The project is listed in RStudio's Project menu where it can be opened easily (see Figure \ref{ProjectMenu}).
    \item When you open the project in RStudio it automatically sets the working directory to the project's directory and loads the workspace, history, and source code files you were last working on.
    \item You can set project specific options like whether PDF presentation documents should be compiled with \emph{Sweave} or {\emph{knitr}}.
    \item When you close the project your R workspace and history are saved in the project directory if you want.
    \item It helps you version control your files.
    \item You can build your Project--run the files in a specific way--with makefiles.
    \item Gives you an easy-to-use interface for managing the R packages that your project depends on.
\end{itemize}

\noindent We will look at many of these points in more detail in the next few chapters.

%%%%%%%%%%%%%%% File Manipulation
\section{R File Manipulation Commands}

R has a range of commands for handling and navigating through files. Including these commands in your source code files allows you to more easily replicate your actions.

\paragraph{{\tt{getwd}}}\index{R function!getwd}

To find your current working directory use the \texttt{getwd} command:

<<Ch4Getwd, echo=TRUE>>=
getwd()
@

\noindent The example here shows you the current working directory that was used while knitting this chapter.

\paragraph{{\tt{list.files}}}\index{R function!list.files}

Use the \texttt{list.files} command to see all of the files and subdirectories in the current working directory. You can list the files in other directories too by adding the directory path as an argument to the command.

<<Ch4ListFiles, echo=TRUE>>=
list.files()
@

\noindent You can see that the \emph{Chapter4} folder has the file \emph{chapter4.Rnw} (the markup file used to create this chapter) and a child directory called \emph{images4} where I stored the original versions of the figures included in this chapter.

\paragraph{{\tt{setwd}}}\index{R function!setwd}

The {\tt{setwd}} command sets the current working directory\index{working directory}. For example, if we are on a Mac or other Unix-like computer we can set the working directory to the {\emph{Analysis}} directory in our Example Project (see Figure \ref{ExampleTree}) like this:

<<Ch4SetWorkingDir, eval=FALSE, echo=TRUE>>=
setwd("/ExampleProject/Analysis/")
@

\noindent Now R will automatically look in the {\emph{Analysis}} folder for files and will save new files into this folder, unless we explicitly tell it to do otherwise.

When working with a knittable document, setting the working directory once in a code chunk changes the working directory for all subsequent code chunks.

\paragraph{{\tt{root.dir}}}\index{knitr option!root.dir}

By default the root (or working) directory for all of the code chunks in a  knittable document is the directory where this document is located. You can reset the directory by feeding a new file path to the \texttt{root.dir} option.\index{knitr option!root.dir} We can set this globally\footnote{See the discussion of global chunk options in Chapter \ref{GettingStartedRKnitr}, page \pageref{GlobalChunkOptions}.} for all of the chunks in the document by including the following code in the document's first chunk.

<<Ch4GlobalRoot, eval=FALSE, echo=TRUE>>=
opts_knit$set(root.dir = '/ExampleProject/Analysis')
@

\noindent Here we set the \emph{/ExampleProject/Analysis} sub-directory as the root directory for all of the chunks in our presentation document.

\textbf{Note:} In general it is preferable to use a nested file structure, as we saw before, rather than specify \texttt{root.dir}. A nested file structure creates one less step for those trying to reproduce your work on a different computer. They do not need to change the \texttt{root.dir} file path.

\paragraph{{\tt{dir.create}}}\index{R function!dir.create}

Sometimes you may want to create a new directory. You can use the {\tt{dir.create}} command to do this.\footnote{Note: you will need the correct system permissions to be able to do this.} For example, to create a {\emph{ExampleProject}} file in the root \emph{C} directory on a Windows computer type:

<<Ch4dir.create, eval=FALSE, echo=TRUE>>=
dir.create("C:\\ExampleProject")
@

\paragraph{{\tt{file.create}}}\index{R function!file.create}

Similarly, you can create a new blank file with the \texttt{file.create} command. To add a blank R source code file called {\emph{SourceCode.R}} to the {\emph{ExampleProject}} directory on the \emph{C} drive use:

<<CH4File, eval=FALSE, echo=TRUE>>=
file.create("C:\\ExampleProject\\SourceCode.R")
@

\paragraph{{\tt{cat}}}\index{R function!cat}\label{catR}

If you want to create a new file and put text into it use the \texttt{cat} (concatenate and print) command. For example, to create a new file in the current working directory called \emph{ExampleEcho.md} that includes the text ``Reproducible Research with R and RStudio'' type:

<<Ch4cat1, eval=FALSE, tidy=FALSE, echo=TRUE>>=
cat("Reproducible Research with R and RStudio",
    file = "ExampleCat.md")
@

\noindent In this example we created a Markdown formatted file by using the \texttt{.md} file extension. We could, of course, change the file extension to \texttt{.R} to set it as an R source code file, \texttt{.Rnw} to create a \emph{knitr} LaTeX file, and so on.

You can use \texttt{cat} to print the contents of one or more objects to a file. \textbf{Warning:} The \texttt{cat} command will overwrite existing files with the new contents. To add the text to existing files use the \texttt{append = TRUE} argument.

<<Ch4cat2, eval=FALSE, tidy = FALSE, echo=TRUE>>=
cat("More Text", file = "ExampleCat.md",
    append = TRUE)
@

\paragraph{{\tt{unlink}}}\index{R function!unlink}

You can use the {\tt{unlink}} command to delete files and directories.

<<CH4Unlink, eval=FALSE, echo=TRUE>>=
unlink("C:\\ExampleProject\\SourceCode.R")
@

\noindent \textbf{Warning:} the \texttt{unlink} command permanently deletes files, so be very careful using this command.

\paragraph{{\tt{file.rename}}}\index{R function!file.rename}

You can use the \texttt{file.rename} to, obviously, rename a file. It can also be used to move a file from one directory to another. For example, imagine that we want to move the \emph{ExampleCat.md} file from the directory \emph{ExampleProject} to one called \emph{MarkdownFiles} that we already created.\footnote{The \texttt{file.rename} command won't create new directories. To move a file to a new directory you will need to create the directory first with \texttt{dir.create}.}

<<Ch4filerename, eval=FALSE, tidy=FALSE, echo=TRUE>>=
file.rename(from = "C:\\ExampleProject\\ExampleCat.md",
            to = "C:\\MarkdownFiles\\ExampleCat.md")
@

\paragraph{{\tt{file.copy}}}\index{R function!file.copy}

The \texttt{file.rename} fully moves a file from one directory to another. To copy the file to another directory use the \texttt{file.copy} command. It has the same syntax as \texttt{file.rename}:

<<Ch4filecopy, eval=FALSE, tidy=FALSE, echo=TRUE>>=
file.copy(from = "C:\\ExampleProject\\ExampleCat.md",
            to = "C:\\MarkdownFiles\\ExampleCat.md")
@

\section{Unix-like Shell Commands for File Management}

Though this book is mostly focused on using R for reproducible research it can be useful to use a Unix-like shell program\index{Unix-like shell program} to manipulate files in large projects. Unix-like shell programs including Bash on Mac and Linux\index{Bash} and Windows PowerShell\index{PowerShell} allow you to type commands to interact with your computer's operating system.\footnote{You can access Bash via the Terminal program\index{Terminal} on Mac OS 10 and Linux computers. It is the default shell on Mac and Linux, so it loads automatically when you open the Terminal. Windows PowerShell comes installed with Windows.} We will especially return to shell commands in the next chapter when we discuss Git\index{Git} version control and makefiles\index{makefile} for collecting data in Chapter \ref{DataGather}, as well as the command-line program\footnote{A command-line program\index{command-line program}\index{command-line} is just a program you run from a shell.} Pandoc (Chapter \ref{LargeDocs} and \ref{MarkdownChapter}). We don't have enough space to fully introduce shell programs or even all of the commands for manipulating files. We are just going to cover some of the basic and most useful commands for file management. For good introductions for Unix and Mac OS 10 computers see William E. Shotts Jr.'s \citeyearpar{ShottsJr2012} book on the Linux command-line. For Windows users, Microsoft maintains a tutorial on Windows PowerShell at \url{http://technet.microsoft.com/en-us/library/hh848793}. The commands discussed in this chapter should work in both Unix-like shells and Windows PowerShell.

It's important at this point to highlight a key difference between R and Unix-like shell syntax. In shell commands you don't need to put parentheses around your arguments. For example, if I want to change my working directory to my Mac Desktop in a shell using the \texttt{cd} command I simply type:\footnote{Many shell code examples in other sources include the shell prompt, like the \texttt{\$} in Bash or \texttt{\textgreater{}} in PowerShell. These are like R's \texttt{\textgreater{}} prompt. I don't include the prompt in code examples in this book because you don't type them.}

<<Ch4ShellIntroExample, eval=FALSE, engine='sh', echo=TRUE>>=
cd /Users/Me/Desktop
@

\noindent In this example \texttt{Me} is my user name.

\paragraph{{\tt{cd}}}\index{shell command!cd}

As we just saw, to change the working directory in the shell just use the {\tt{cd}} (change directory) command. Here is an example of changing the directory in Windows PowerShell:

<<Ch4cdPowerShell, eval=FALSE, engine='sh', echo=TRUE>>=
cd C:/Users/Me/Desktop
@

\noindent If you are in a child directory and want to change the working directory to the previous working directory you were in, simply type:

<<Ch4ChildtoParent, eval=FALSE, engine='sh', echo=TRUE>>=
cd -
@

\noindent If, for example, our current working directory is \emph{/User/Me/Desktop} and we typed \texttt{cd} followed by a minus sign (\texttt{cd -}) then the working directory would change to \emph{/User/Me}. Note this will not work in PowerShell.

\paragraph{{\tt{pwd}}}\index{shell command!pwd}

To find your current working directory, use the \texttt{pwd} command (present working directory). This is essentially the same as R's \texttt{getwd} command.

<<Ch4pwd, eval=FALSE, engine='sh', echo=TRUE>>=
pwd

## /Users/Me/Desktop
@

\paragraph{{\tt{ls}}}\index{shell command!ls}

The \texttt{ls} (list) command works very similarly to R's \texttt{list.files} command. It shows you what is in the current working directory.

<<Ch4ls, eval=FALSE, tidy=FALSE, engine='sh', echo=TRUE>>=
ls

## chapter4.Rnw images4
@

\noindent As we saw earlier, R also has an \texttt{ls} command.\index{R function!ls} R's \texttt{ls} command lists items in the R workspace. The shell's \texttt{ls} command lists files and directories in the working directory.

\paragraph{{\tt{mkdir}}}\index{shell command!mkdir}

Use \texttt{mkdir} to create a new directory. For example, if I wanted to create a directory in my Linux root directory called {\emph{NewDirectory}} I would type:

<<Ch4mkdir, eval=FALSE, engine='sh', echo=TRUE>>=
mkdir /NewDirectory
@

\noindent If running this code on Mac or Linux gives you an error message like this:

<<Ch4mkdirError, eval=FALSE, engine='sh', echo=TRUE>>=
mkdir: /NewDirectory: Permission denied
@

\noindent you simply need to use the \texttt{sudo}\index{shell command!sudo} command to run the command with higher privileges.

<<Ch4Sudo, eval=FALSE, engine='sh', echo=TRUE>>=
sudo mkdir /NewDirectory
@

\noindent Running this code will prompt you to enter your administrator password.

\paragraph{{\tt{echo}}}\index{shell command!echo}

There are a number of ways to create new files in Unix-like shells. One of the simplest ways is with the \texttt{echo} command. This command simply prints its arguments. For example:

<<Ch4Echo1, engine='sh', echo=TRUE>>=
echo Reproducible Research with R and RStudio
@

\noindent If you add the greater-than symbol (\verb|>|) after the text you want to print and then a file name, \texttt{echo} will create the file (if it doesn't already exist) in the current working directory and then print the text into the file.

<<Ch4Echo2, eval=FALSE, engine='sh', echo=TRUE>>=
echo Reproducible Research with R and RStudio > ExampleEcho.md
@

\noindent Using only one greater-than sign will completely erase the \emph{ExampleEcho.md} file's contents and replace them with \texttt{Reproducible Research with R and RStudio}. To add the text at the end of an existing file, use two greater-than signs (\verb|>>|).

<<Ch4Echo3, eval=FALSE, engine='sh', echo=TRUE>>=
echo More text. >> ExampleEcho.md
@

\noindent There is also a \texttt{cat} shell command.\index{shell command!cat} It works slightly differently than the R version of the command and I don't cover it here.

\paragraph{{\tt{rm}}}\index{shell command!rm}

The {\tt{rm}} command is similar to R's {\tt{unlink}} command. It removes (deletes) files or directories. Again, be careful when using this command, because it permanently deletes the files or directories.

<<Ch4rm, eval=FALSE, engine='sh', echo=TRUE>>=
rm ExampleEcho.md
@

\noindent As we saw in Chapter \ref{GettingStartedRKnitr}, R also has an \texttt{rm} command. It is different because it removes objects from your R workspace rather than files from your working directory.

\paragraph{{\tt{mv}}}\index{shell command!mv}

To move a file from one directory to another with the shell, use the \texttt{mv} (move) command. For example, to move the file \emph{ExampleEcho.md} from \emph{ExampleProjects} to \emph{MarkdownFiles} use the following code and imagine both directories are in the root directory:\footnote{If they were not in the root directory we would not place a forward slash at the beginning.}

<<Ch4mv, eval=FALSE, engine='sh', echo=TRUE>>=
mv /ExampleProject/ExampleEcho.md /MarkdownFiles
@

\noindent Note that the \emph{MarkdownFiles} directory must already exist, otherwise it will simply rename the file. So this command is similar to the R command \texttt{file.rename}.

\paragraph{{\tt{cp}}}\index{shell command!cp}

The \texttt{mv} command completely moves a file from one directory to another. To copy a version of the file to a new directory use the \texttt{cp} command. The syntax is similar to \texttt{mv}:

<<Ch4cp, eval=FALSE, engine='sh', echo=TRUE>>=
cp /ExampleProject/ExampleEcho.md /MarkdownFiles
@

\paragraph{{\tt{system}} (R command)}\index{R function!system}\label{systemRcommand}\index{R!shell commands}

You can run shell commands from within R using R's \texttt{system} command. For example, to run the \texttt{echo} command from within R type:

<<Ch4System, eval=FALSE, echo=TRUE>>=
system("echo Text to Add > ExampleEcho.md")
@


\section{File Navigation in RStudio}\index{RStudio!Files pane}\index{RStudio}

The RStudio \emph{Files} pane allows us to navigate our file tree and do some basic file manipulations. The left panel of Figure \ref{FilesPane} shows us what this pane looks like. The pane allows us to navigate to specific files and folders and delete and rename files. To select a folder as the working directory tick the dialog box next to the file then click the \texttt{More} button and select \texttt{Set As Working Directory}. Under the \texttt{More} button (\includegraphics[scale=0.5]{Children/Chapter4/images4/MoreIcon.png}) you will also find options to \texttt{Move} and \texttt{Copy} files (see the right pane of Figure \ref{FilesPane}).

The \emph{Files} pane is a GUI, so our actions in the \emph{Files} pane are not as easily reproducible as the commands we learned earlier in this chapter.

\begin{figure}
    \caption{The RStudio Files Pane}
    \label{FilesPane}
    \vspace{0.25cm}
    \centering
        \mbox{
            \subfigure{\includegraphics[width=0.4\textwidth]{Children/Chapter4/images4/RStudioFiles.png}}\quad
            \subfigure{\includegraphics[width=0.4\textwidth]{Children/Chapter4/images4/MoreMore.png}
            }}
\end{figure}

\subsection*{Chapter summary}

In this chapter we've learned how to organize our research files to enable dynamic replication. This included not only how they can be ordered in a computer's file system, but also the file path naming conventions--the addresses--that computers use to locate files. Once we know how these addresses work we can use R and shell commands to refer to and manipulate our files. This skill is particularly useful because it allows us to place code in text-based files to manipulate our project files in highly reproducible ways. In the next few chapters we will begin to put these skills in practice when we learn how to store our files and create data files in reproducible ways.
