% Chapter Chapter 5 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 5 May 2015

<<set-parent5, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('Rep-Res-Parent.Rnw')
@

\chapter{Storing, Collaborating, Accessing Files, and Versioning}\label{Storing}

In addition to being well organized, your research files need to be accessible for other researchers to be able to reproduce your findings. A useful way to make your files accessible is to store them on a cloud storage service\footnote{These services store your data on remote servers.} \cite[see][]{Howe2012}. This chapter describes in detail two different cloud storage services--Dropbox and GitHub--that you can use to make your research files easily accessible to others. Not only do these services enable others to reproduce your research, they also have a number of benefits for your research workflow. Researchers often face a number of data management issues that, beyond making their research difficult to reproduce, can make doing the initial research difficult.

First, there is the problem of \textbf{storing} data so that it is protected against computer failure--virus infections, spilling coffee on your laptop, and so on. Storing data locally--on your computer--or on a flash drive is generally more prone to loss than on remote servers in the cloud.

Second, we may work on a project with different computers and mobile devices. For example, we may use a computer at work to run computationally intensive analysis, while editing our presentation document on a tablet computer while riding the train to the office. So, we need to be able to \textbf{access} our files from multiple devices in different locations. We often need a way for our \textbf{collaborators} to access and edit research files as well.

Finally, we almost never create a data set or write a paper perfectly all at once. We may make changes and then realize that we liked an earlier version, or parts of an earlier version better. This is a particularly important issue in data management where we may transform our data in unintended ways and want to go back to earlier versions. Also, when working on a collaborative project, one of the authors may accidentally delete something in a file that another author needed. To deal with these issues we need to store our data in a system that has \textbf{version control}. Version control systems keep track of changes we make to our files and allows us to access previous versions if we want to.\index{version control}

You can solve all of these problems in a couple of different ways using free or low cost cloud-based storage formats. In this chapter we will learn how to use Dropbox and Git/GitHub for research files:

\begin{itemize}
    \item storage,
    \item accessing,
    \item collaboration,
    \item version control.
\end{itemize}

\section{Saving Data in Reproducible Formats}

Before getting into the details of cloud-based data storage for all of our research files, let's consider what type of formats you should actually save your data in\index{data file formats}. A key issue for reproducibility is that others are able to not only get hold of the exact data you used in your analysis, but be able to understand and use the data now and in the future. Some file formats make this easier than others.

In general, for small to moderately-sized data sets\footnote{I don't cover methods for storing and handling very large data sets--with high hundreds of thousands and more observations. For information on large data and R, not just storage, one place to look is this blog post from RDataMining: \url{http://rdatamining.wordpress.com/2012/05/06/online-resources-for-handling-big-data-and-parallel-computing-in-r/} (posted 6 May 2012). One popular service for large file storage is Amazon S3\index{Amazon S3} (\url{http://aws.amazon.com/s3/}). I haven't used this service and can't suggest ways to integrate it with R.} plain-text formats like comma-separated values\index{comma-separated values} (\texttt{.csv}) or tab-separated values\index{tab-separated values}\footnote{Sometimes this format is called tab-delimited values\index{tab-delimited values}.} (\texttt{.tsv}) are good ways to store your data. These formats simply store a data set as a text file. A row in the data set is a line in the text file. Data is separated into columns with commas or tabs, respectively. These formats are not dependent on a specific program. Any program that can open text files can open them, including a wide variety of statistical programs other than R as well as spreadsheet programs like Microsoft Excel.\index{Microsoft Excel} Using text file formats helps future-proof your research. Version control systems that track changes to text--like Git\index{Git}--are also very effective version control systems for these types of files.

Use the \texttt{write.table} command\index{R function!write.table} to save data in plain-text formats from R. For example, to save a data frame called {\emph{Data}} as a CSV file called {\emph{MainData.csv}} in our example {\emph{DataFiles}} directory (see Figure \ref{ExampleTree}):

<<Ch5WriteTable, eval=FALSE, tidy=FALSE>>=
write.table(Data, "/ExampleProject/Data/DataFiles/MainData.csv",
                 sep = ",", row.names = FALSE)
@

\noindent \texttt{row.names = FALSE}\index{R!row.names} prevents R from including the row names in the output file.\footnote{Frequently the row names are just the row numbers which may have no substantive meaning.} The \texttt{sep = ","} argument specifies that we want to use commas to separate values into columns. For CSV files you can use a modified version of this command called \texttt{write.csv}\index{R function!write.csv}. This command simply makes it so that you don't have to write \texttt{sep = ","}.\footnote{\texttt{write.csv} is a `wrapper'\index{wrapper} for \emph{write.table}.}

If you want to save your data with values separated by tabs, rather than commas, simply set the argument \verb|sep = "\t"| and set the file extension to \texttt{.tsv}.\label{TSVEscape}

R is able to save data in a wide variety of other file formats, mostly through the {\emph{foreign}} package (see Chapter \ref{DataGather}). These formats may be less future-proof than simple text-formatted data files.

One advantage of many other statistical programs' file formats is that they include not only the underlying data but also other information like variable descriptions. If you are using plain-text files to store your data you will need to include a separate file, preferably in the same directory as the data file describing the variables and their sources. In Chapter \ref{TablesChapter} (Section \ref{VarDescriptTables}) we will look at how to automate the creation of variable description files.

\section{Storing Your Files in the Cloud: Dropbox}

In this book we'll cover two (largely) free cloud storage services that allow you to store, access, collaborate on, and version control your research files. These services are Dropbox and GitHub.\footnote{Dropbox provides a minimum amount of storage for free, above which they charge a fee. GitHub lets you create publicly accessible repositories--kind of like project folders--for free, but they charge for private repositories.} Though they both meet our basic storage needs, they do so in different ways and require different levels of effort to set up and maintain.

These two services are certainly not the only way to make your research files available. Research-oriented services include the SDSC Cloud,\footnote{\url{https://cloud.sdsc.edu/hp/index.php}} the Dataverse Project,\index{Dataverse Project}\footnote{\url{http://thedata.org/}} figshare,\footnote{\url{http://figshare.com/}} and RunMyCode.\footnote{\url{http://www.runmycode.org/}} These services include good built-in citation systems, unlike Dropbox and GitHub. They may be a very good place to store research files once the research is completed or close to completion. Some journals are beginning to require key reproducibility files be uploaded to these sites. However, these sites' ability to store, access, collaborate on, and version control files \emph{during} the main part of the research process is mixed. Services like Dropbox and GitHub are very capable of being part of the research workflow from the beginning.

The easiest types of cloud storage for your research are services like Dropbox\footnote{\url{http://www.dropbox.com/}} and Google  Drive.\footnote{\url{https://drive.google.com/}} These services not only store your data in the cloud, but also provide ways to share files. They even include basic version control capabilities. I'm going to focus on Dropbox because it currently offers a complete set of features that allow you to store, version, collaborate, and access your data. I will focus on how to use Dropbox on a computer. Some Dropbox functionality may be different on mobile devices.

\subsection{Storage}

When you sign up for Dropbox and install the program\footnote{See \url{https://www.dropbox.com/downloading} for downloading and installation instructions.} it creates a directory on your computer's hard drive. When you place new files and folders in this directory and make changes to them, Dropbox automatically syncs the directory with a similar folder on a cloud-based server. Typically when you sign up for the service you'll receive a limited amount of storage space for free, usually a few gigabytes. This is probably enough storage space for a number of text file-based research projects.

\subsection{Accessing data}

\label{EnablePublicFolder}All files stored on Dropbox have a URL address through which they can be accessed from a computer connected to the internet. Files in either the Dropbox \emph{Public}\index{Dropbox!Public folder}\footnote{Note: if you created your Dropbox account after 4 October 2012 you will not automatically have a \emph{Public} folder. To enable the folder on your account see this website: \url{https://www.dropbox.com/help/16/en}. You will need a Pro or Dropbox for Business account to enable a new Public folder. \index{Dropbox!enable Public folder}} folder or in other, non-\emph{Public} folders can be downloaded into R. Downloading files from these two different sources requires two different methods. Let's quickly look at how to download files from the Public folder. In the next chapter (see Section \ref{DropboxNonPublic}) we'll look at how to download data from non-\emph{Public} Dropbox folders into R.

If the file is stored in the \emph{Public} folder, right-click on the file icon in your Dropbox folder on your computer. Then click \texttt{Copy Public Link}.\label{PublicLink} This copies the URL into your clipboard, from which you can paste it into your R source code (or wherever). If you are logged into the Dropbox website, right-click on files in your \emph{Public} folder and then select \texttt{Copy public link\ldots}.

Once you have the URL you can load the file directly into R using the \verb|source_data| command in the \emph{repmis} package\index{repmis} \citep{R-repmis} for plain-text formatted data or use the \texttt{source\_url}\index{R function!source\_url} command in the \emph{devtools} package \citep{R-devtools} for source code files (see Chapter \ref{StatsModel}).

Let's download data directly into R from my Dropbox Public folder. The data set's URL is: \url{https://www.dropbox.com/s/130c5ol3o2jjmgk/public.fin.msm.model.csv?dl=1}.\footnote{This data is from \cite{Gandrud2012}. I've shortened the URL using Bitly\index{Bitly} (\url{https://bitly.com/}) so that it will fit on the page.}

<<Ch5PublicFolderDownload, message=TRUE>>=
# Download data on Financial Regulators
# stored in a Dropbox Public folder

# Load repmis
library(repmis)

# Place the URL into the object FinURL
FinURL <- "https://bit.ly/2xlQ2j5"

# Download data
FinRegulatorData <- source_data(FinURL,
                           sep = ",",
                           header = TRUE)

# Show variables in FinRegulatorData
names(FinRegulatorData)
@

\noindent Let's go through this code.\label{SepHeadExplain} We already saw in our discussion of \texttt{write.table} how the \texttt{sep = ","} argument specifies that the data file's values are separated by commas. The \texttt{header = TRUE} argument tells R that the first row of the file contains the variable names. Note that from version 0.4 \emph{repmis} automatically guesses how the columns are separated and whether or not to use the first row as the header. Because of this, we usually don't need to set the \texttt{sep} and \texttt{header} arguments explicitly. I've only done so in this example for illustration.

You're probably also wondering about the line that begins \emph{\texttt{\#\# SHA-1 hash of}} \ldots in the output. The long string of numbers and letters at the end of this line is basically a unique ID that \verb|source_data| assigns to the file. It is called an SHA-1 hash. We'll see SHA-1\index{SHA-1 hash} hashes more in the next section on GitHub (Section \ref{GitHubMain}) and in Chapter \ref{DataGather} (Section \ref{SecureData6}). To give you a preview: it allows us to see if the file that we downloaded is the file we thought we downloaded.

To get a file's URL from your local Dropbox folder when the file is \emph{not} in your \emph{Public} folder, you also right-click on the file. Then choose \texttt{Share Dropbox Link}. This will copy the link URL into your clipboard. You can also get these URL links through the online version of your Dropbox. First, log into the Dropbox website. You can again right-click on the file name and then \texttt{Share}. This will bring up a box displaying the link for you to copy. Alternatively, when you hover your cursor over a file or folder you will see a \texttt{Share} icon (\includegraphics[scale=0.3]{Children/Chapter5/images5/DropboxLink.png}) appear on the far right. Clicking on this icon will also get you the link.

In either case, you cannot use the \verb|source_data| command to download data from non-\emph{Public} folders into R. In the next chapter we'll see how to import this type of data into R (see Section \ref{DropboxNonPublic}). To give you a preview: we'll use the \verb|source_DropboxData|\index{R function!source\_DropboxData} function from the \emph{repmis}\index{repmis} package.

\subsection{Collaboration}

Though others can easily access your data and files with Dropbox URL links, you cannot save files through the link. You must save files in the Dropbox folder on your computer or upload them through the website. If you would like collaborators to be able to modify the research files you will need to `share' the Dropbox folder with them. You cannot fully share your \emph{Public} folder, i.e. give others write permission, so you will need to keep the files you want collaborators to be able to modify in a \emph{non-Public} folder. Once you create this \emph{non-Public} folder you can share it with your collaborators by going to the Dropbox website and right-clicking on the folder's name. Then select \texttt{Invite people to collaborate\ldots}. Enter your collaborator's email address when prompted. They will be sent an email that will allow them to accept the share request and, if they don't already have an account, sign up for Dropbox.

\subsection{Version control}

Dropbox has a simple version control system. Every time you save a document a new version is created on Dropbox. To view a previous version, navigate to the file on the Dropbox website. Then right-click on the file. In the menu that pops up select \texttt{Previous Versions}. This will take you to a webpage listing previous versions of the file, who created the version, and when it was created. A new version of a file is created every time you save a file and it is synced to the Dropbox cloud service. You can see a list of changes made to files in your Dropbox folder by going to the website and clicking on \texttt{Events}.

Note that with a free Dropbox account, previous versions of a file are only stored for \textbf{30 days}. To be able to save previous versions for more than 30 days you will need a paid account.\footnote{For more details see: \url{https://www.dropbox.com/en/help/11}.}

\section{Storing Your Files in the Cloud: GitHub}\label{GitHubMain}\index{GitHub|(}\index{Git|(}

Dropbox adequately meets our four basic criteria for reproducible data storage. It is easy to set up and use. GitHub meets the criteria and more, especially when it comes to version control. It is, however, less straightforward at first. In this section we will learn enough of the basics to get you started using GitHub to store, access, collaborate on, and version control your research.

GitHub is an interface and cloud hosting service built on top of the Git\index{Git} version control system.\footnote{I used Git version 1.7.9.6 for this book.} Git does the version control. GitHub stores the data remotely as well as providing a number of other features, some of which we look at below. GitHub was not explicitly designed to host research projects or even data. It was designed to host ``socially coded'' computer programs--in what Git calls ``repositories''\index{Git!repository}--repos\index{GitHub!repo}\index{repo} for short--by making it easy for a number of collaborators to work together to build computer programs. This seems very far from reproducible research.

Remember that as reproducible researchers, we are building projects out of interconnected text files. In important ways, this is exactly the same as building a computer program. Computer programs are also basically large collections of interconnected text files. Like computer programmers, we need ways to store, version control, access, and collaborate on our text files. Because GitHub is very actively used by people with similar needs (who are also really good programmers), the interface offers many highly developed and robust features for reproducible researchers.

GitHub's extensive features and heart in the computer programming community means that it takes a longer time than Dropbox for novice users to set up and become familiar with. So we need good reasons to want to invest the time needed to learn GitHub. Here is a list of GitHub's advantages over Dropbox for reproducible research that will hopefully convince you to get started using it:\footnote{Because many of these features apply to any service that relies on Git, much of this list of advantages also applies to alternative Git cloud storage services such as Bitbucket (\url{https://bitbucket.org/}).} \\[0.25cm]

\noindent{\bf{Storage and access}}
\begin{itemize}
    \item Dropbox simply creates folders stored in the cloud which you can share with other people. GitHub makes your projects accessible on a fully featured project website (see Figure \ref{BookRepository}). An example feature is that it automatically renders Markdown files called {\emph{README.md}}\footnote{You can use a variety of other markup languages as well. See \url{https://GitHub.com/GitHub/markup}.} in a GitHub directory on the repository's website. This makes it easy for independent researchers to find the file and read it.
    \item GitHub can create and host a website for your research project that you could use to present the results, not just the replication files.
\end{itemize}

\vspace{0.2cm}

\noindent{\bf{Collaboration}}

\begin{itemize}
        \item Dropbox allows multiple people to share files and change them. GitHub does this and more.
        \item GitHub keeps meticulous records of who contributed what to a project.
        \item Each GitHub repository has an ``Issues'' area where you can note issues and discuss them with your collaborators. Basically, this is an interactive to-do list for your research project. It also stores the issues so you have a full record.
        \item Each repository can also host a wiki\index{wiki} that, for example, could explain in detail how certain aspects of a research project were done.
        \item Anyone can suggest changes to files in a public repository. These changes can be accepted or declined by the project's authors. The changes are recorded by the Git version control system. This could be especially useful if an independent researcher notices an error.
\end{itemize}

\vspace{0.2cm}

\noindent{\bf{Version control}}
\begin{itemize}
    \item Dropbox's version control system only lets you see files' names, the times they were created, who created them, and revert back to specific versions. Git tracks every change you make. The GitHub website and GUI programs for Mac and Windows provide nice interfaces for examining specific changes in text files.
    \item Dropbox creates a new version every time you save a file. This can make it difficult to actually find the version you want as the versions quickly multiply. Git's version control system only creates a new version when you tell it to.
    \item All files in Dropbox are version controlled. Git allows you to ignore specific files. This is helpful if you have large binary files (i.e. not text files) that you do not want to version control because doing so will use up considerable storage space.
    \item Unless you have a paid account, previous file versions in Dropbox disappear after 30 days. GitHub stores previous versions indefinitely for all account types.
    \item Dropbox does not merge conflicting versions of a file together. This can be annoying when you are collaborating on a project and more than one author is making changes to documents at the same time. Git identifies conflicts and lets you reconcile them.
    \item Git is directly integrated into RStudio Projects\index{RStudio!Projects}.\footnote{RStudio also supports the Subversion\index{Subversion version control} version control system, but I don't cover that here.}
\end{itemize}

\begin{figure}
    \caption{A Basic Git Repository with Hidden {\emph{.git}} Folder Revealed}
    \label{BasicGitRepo}
        \begin{center}
            \includegraphics[width=0.5\textwidth]{Children/Chapter5/images5/BasicGitRepository.png}
        \end{center}
\end{figure}

\subsection{Setting up GitHub: Basic}

There are at least three ways to use Git/GitHub on your computer. You can use the command-line version of Git. It's available for Mac and Linux (in the Terminal\index{Terminal}) as well as Windows through Git Bash\index{Git Bash}.\footnote{The interface for Git Bash looks a lot like the Terminal or Windows PowerShell.} You can also use the Graphical User Interface GitHub program. Currently, it's only available for Windows and Mac.  RStudio also has GUI-style Git functionality for RStudio Projects.\index{RStudio!Projects} In this section I focus on how to use the command-line version, because it will help you understand what the GUI versions are doing and allow you to better explore more advanced Git features not covered in this book. In the next section I will mention how to use Git with RStudio Projects.

The first thing to do to set up Git and GitHub is go to the GitHub website (\url{https://GitHub.com/}) and sign up for an account. Second, you should go to the following website for instructions on setting up GitHub:\index{Git!install} \url{https://help.GitHub.com/articles/set-up-git}. The instructions on that website are very comprehensive, so I'll direct you there for the full setup information. Note that installing the GUI version of GitHub also installs Git and, on Windows, Git Bash.

\subsection{Version control with Git}

Git is primarily a version control system, so we will start our discussion of how to use it by looking at how to version your repositories.

\paragraph{Setting up Git repositories locally}

You can setup a Git repo on your computer with the command-line.\footnote{Much of the discussion of the command-line in this section is inspired by Nick Farina's blog post on Git (see \url{http://nfarina.com/post/9868516270/git-is-simpler}, posted 7 September 2012).} I keep my repositories\index{Git!repository} in a folder called {\emph{git\_repositories}},\footnote{To follow along with this code you will first need to create a folder called {\emph{git\_repositories}} in your root directory. Note also that throughout this section I use Unix file path conventions.} though you can use Git with almost any directory you like. The \emph{git\_repositories} directory has the root folder as its parent. Imagine that we want to set up a repository in this directory for a project called {\emph{ExampleProject}}. Initially it will have one README file called {\emph{README.md}}. To do this, we would first type into the Terminal for Mac and Linux computers:

<<Ch5CLGitRep, eval=FALSE, engine='sh'>>=
# Make new directory 'ExampleProject'
mkdir /git_repositories/ExampleProject

# Change to directory 'ExampleProject'
cd /git_repositories/ExampleProject

# Create new file README.md
echo "# An Example Repository" > README.md
@

\noindent So far we have only made the new directory and set it as our working directory (see Chapter \ref{DirectoriesChapter}). All of the examples in this section assume your current working directory is set to the repo. Then, with the \texttt{echo} shell command we created a new file named {\emph{README.md}}\index{README file} that includes the text \verb|# An Example Repository|. Note that the code is basically the same in Windows PowerShell\index{PowerShell} or Git Bash\index{Git Bash}. Also, you don't have to do these steps in the command-line. You could just create the new folders and files the same way that you normally do with your mouse in your GUI operating system.

Now that we have a directory with a file, we can tell Git that we want to treat the directory {\emph{ExampleProject}} as a repository and that we want to track changes made to the file {\emph{README.md}}. Use Git's \texttt{init} (initialize)\index{Git command!init} command to set the directory as a repository. See Table \ref{GitCommandsTable} for the list of Git commands covered in this chapter.\footnote{For a comprehensive guide to Git commands, see \url{http://git-scm.com/}.} Use Git's \texttt{add} command to add a file to the Git repository.\index{Git command!add} For example,

<<Ch5GitAdd, eval=FALSE, engine='sh'>>=
# Initialize the Git repository
git init

# Add README to the repository
git add README.md
@

\noindent You probably noticed that you always need to put \texttt{git} before the command. This tells the shell what program the command is from. When you initialize a folder as a Git repository, a hidden folder called {\emph{.git}} is added to the directory (see Figure \ref{BasicGitRepo}). This is where all of your changes are kept. If you want to add all of the files in the working directory to the Git repository type:

<<Ch5GitAddPeriod, eval=FALSE, engine='sh'>>=
# Add all files to the repository
git add .
@

\noindent When we want Git to track changes made to files added to the repository we can use the \texttt{commit}\index{Git command!commit} command. In Git language we are ``committing'' the changes to the repository.

<<Ch5Commit, eval=FALSE, engine='sh'>>=
# Commit changes
git commit -a -m "First Commit, created README file"
@

\noindent Note: the files won't appear on GitHub yet. Later in the chapter we will learn how to push commits to your remote GitHub repository. The \texttt{-a} (all) option commits changes made to all of the files that have been added to the repository. You can include a message with the commit using the \texttt{-m} option like: \texttt{"First Commit, created README file"}. Messages help you remember general details about individual commits. This is helpful when you want to revert to old versions. \textbf{Remember:} Git only tracks changes when you commit them.

Finally, you can use the \texttt{status} command for details about your repository, including uncommitted changes. Generally it's a good idea to use the \texttt{-s} (short) option, so that the output is more readable.

<<Ch5Status, eval=FALSE, engine='sh'>>=
# Display status
git status -s
@

\begin{table}
  \caption{A Selection of Git Commands}
  \label{GitCommandsTable}
      \begin{center}
      \begin{tabular}{l p{7cm}}
            \hline
            Command & Description \\[0.25cm] \hline\hline
            \texttt{add} & Add a file to a Git repository. \\[0.25cm]
            \texttt{branch} & Create and delete branches. \\[0.25cm]
            \texttt{checkout} & Checkout a branch. \\[0.25cm]
            \texttt{clone} & Clone a repository (for example, the remote GitHub version) into the current working directory. \\[0.25cm]
            \texttt{commit} & Commit changes to a Git repository. \\[0.25cm]
            \texttt{fetch} & Download objects from the remote (or another) repository. \\[0.25cm]
            \texttt{.gitignore} & Not a Git command, but a file you can add to your repository to specify what files/file types Git should ignore. \\[0.25cm]
            \texttt{init} & Initialize a Git repository. \\[0.25cm]
            \texttt{log} & Show a repo's commit history. \\[0.25cm]
            \texttt{merge} & Merge two or more commits/branches together. \\[0.25cm]
            \texttt{pull} & \texttt{fetch} data from a remote repository and try to \texttt{merge} it with your commits. \\[0.25cm]
            \texttt{push} & Add committed changes to a remote Git repository, i.e. GitHub. \\[0.25cm]
            \texttt{remote add} & Add a new remote repository to an existing project. \\[0.25cm]
            \texttt{rm} & Remove files from Git version tracking. \\[0.25cm]
            \texttt{status} & Show the status of a Git repository including uncommitted changes made to files. \\[0.25cm]
            \texttt{tag} & Bookmark particularly significant commits. \\[0.25cm]
            \hline
      \end{tabular}
    \end{center}
  {\scriptsize{Note: when you use these commands in the shell, you will need to precede them with \texttt{git} so the shell knows what program they are from.}}
\end{table}

\begin{figure}[t]
    \caption{Part of this Book's GitHub Repository Webpage}
    \label{BookRepository}
    \begin{center}
    \includegraphics[width=0.9\textwidth]{Children/Chapter5/images5/GitHubReadme.png}
    \end{center}
\end{figure}

\paragraph{Checkout}\index{Git command!checkout}

It is useful to step back for a second and try to understand what Git is doing when you commit your changes. In the hidden {\emph{.git}}, folder Git is saving all of the information in compressed form from each of your commits into a sub-folder called {\emph{objects}}. Commit objects\index{Git!commit object}\footnote{Other Git objects include trees\index{Git!tree} (sort of like directories), tags\index{Git!tag} (bookmarks for important points in a repo's history), and blobs\index{Git!blob} (individual files).} are everything from a particular commit. I mean everything. If you delete all of the files in your repository (except for the {\emph{.git}} folder) you can completely recover all of the files from your most recent commit with the \texttt{checkout} command:

<<Ch5CheckoutBasic, eval=FALSE, engine='sh'>>=
# Checkout latest commit
git checkout -- .
@

\noindent Note that there is a space between the two dashed lines and the period. You can also change to any other commit or any committed version of a particular file with \texttt{checkout}. Simply replace the \verb|--| with the commit reference.\index{Git!commit reference} Note that the period at the end is still very important to include after the commit reference. The commit reference is easy to find and copy from a repository's GitHub webpage\index{GitHub!repository webpage} (see below for more information on how to create a GitHub webpage).\footnote{You can also search your commit history and roll back to a previous commit using only the command-line. To see the commit history use the \texttt{log}\index{Git command!log} command (more details at \url{http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History}). When a repo has many commits, this can be a very tedious command to use, so I highly recommend the GUI version of GitHub or the repo's GitHub website.} For an example of a GitHub repo webpage, see Figure \ref{BookRepository}. Click on the link that lists the number of repo commits on the left-hand side of the repo's webpage. This will show you all of the commits. A portion of this book's commit history is shown in Figure \ref{BookHistory}. By clicking on the {\tt{Browse Code}} icon (\includegraphics[scale=0.4]{Children/Chapter5/images5/BrowseCodeIcon.png}) you can see what the files at any commit looked like. Next to this button is another with a series of numbers and letters. This is the commit's SHA-1 hash.\footnote{Secure Hash Algorithm}\index{SHA-1 hash} For our purposes, it is the commit's reference number. Click on the {\tt{Copy SHA}} button to the left of the SHA to copy it. You can then paste it as an argument to your {\tt{git checkout}} command. This will revert you to that particular commit. Also include the file name if you want to revert to a particular version of a particular file.

\begin{figure}[t]
    \caption{Part of this Book's GitHub Repository Commit History Page}
    \label{BookHistory}
    \begin{center}
    \includegraphics[width=0.9\textwidth]{Children/Chapter5/images5/CommitHistory.png}
    \end{center}
\end{figure}

\paragraph{Tags}

SHA-1 hashes are a bit cumbersome to use as references. What was the hash number for that one commit? To solve this problem you can add bookmarks, known as ``tags'',\index{Git!tag}\index{Git command!tag} to particularly important commits. Imagine we just committed our first full draft of a project. We want to tag it as version 0.1, i.e. ``v0.1''. To do this use Git's tag command:

<<Ch5TagMake, eval=FALSE, engine='sh'>>=
# Tag most recent commit v0.1
git tag -a v0.1 -m "First draft"
@

\noindent The \verb|-a| option adds the tag \texttt{v0.1} and \verb|-m| lets us add a message. Now we can checkout this particular commit by using its tag, i.e.:

<<Ch5CheckoutTag, eval=FALSE, engine='sh'>>=
# Checkout v0.1
git checkout v0.1
@

\noindent This will create a new ``branch'' with a generic name \emph{(detached from v0.1)} where you can make changes and commit them. If you plan to checkout a previous tagged version and make changes to it, it is a good idea to specifically name the branch using the \verb|-b| argument.\footnote{If you don't, then the new branch will have a ``detached head'' which will create problems using the branch in the future.} For example, to give it the name \emph{v0.1Branch} type:

<<Ch5CheckoutTagNamed, eval=FALSE, engine='sh'>>=
# Checkout v0.1 as v0.1Brance
git checkout v0.1 -b v0.1Branch
@

\noindent What is a branch?

\paragraph{Branches}

Sometimes you may want to work on an alternative version of your project and then merge changes made to this version back into the main one. For example, the main version could be the most stable current copy of your research, while the alternative version could be a place where you test out new ideas. Git allows you to create a new \emph{branch}\index{Git!branch}\index{Git command!branch} (alternative version of the repo) which can be merged back into the \emph{master} (main) branch. To see what branch you are using type:

<<Ch5CheckBranch, engine='sh'>>=
# Show git branch
git branch
@

To create a new branch use, simply enough, the \texttt{branch} command. For example, to create a new branch called \emph{Test}:

<<Ch5NewBranch, eval=FALSE, engine='sh'>>=
# Create Test branch
git branch Test
@

\noindent You can now use \texttt{checkout} to switch to this branch.\footnote{To delete the \emph{Test} branch use the \texttt{-d} argument, i.e. \texttt{git branch -d Test}.} Here is a shortcut for creating and checking out the branch:

<<Ch5NewBranchShortCut, eval=FALSE, engine='sh'>>=
# Create and checkout Test branch
git checkout -b Test
@

\noindent The \texttt{-b} (branch) option for \texttt{checkout} creates the new \emph{Test} branch before switching to it.

To merge\index{Git command!merge} changes you commit in the \emph{Test} branch to the \emph{master}, \texttt{add} and \texttt{commit} your changes, \texttt{checkout} the \emph{master} branch, then use the \texttt{merge}\index{merge}\index{Git!merge} command.\footnote{Any uncommitted changes are merged with a branch when it is checked out.}

<<ChMergeBrances, eval=FALSE, engine='sh'>>=
# Add files
git add .

# Commit changes to Test branch
git commit -a -m "Commit changes to Test"

# Checkout master branch
git checkout master

# Merge master and Test branches
git merge Test
@

\noindent Note, when you merge a branch you may encounter conflicts in the files that make it impossible to smoothly merge the files together. Git will tell you what and where these are; you then need to decide what to keep and what to delete.

\paragraph{Having Git ignore files}

There may be files in your repository that you do not want to keep under version control. Maybe this is because they are very large files or cached files from \emph{knitr} or other files that are byproducts of compiling an R LaTeX document (see Chapter \ref{StatsModel}). To have Git ignore particular files, simply create a file called \emph{.gitignore}.\footnote{Note that like \emph{.git}, \emph{.gitignore} files are hidden.}\index{Git!.gitignore}\index{Git!ignore files} You can either put this file in the repository's parent directory to create a \emph{.gitignore} file for the whole repository or in a subdirectory to ignore files in that subdirectory. In the \emph{.gitignore} file, add ignore rules by simply including the names of the files that you want to have Git ignore. For example, a \emph{.gitignore} file that is useful for ignoring files that are the byproduct of compiling an R LaTeX file would look something like this:

<<Ch5gitignore, eval=FALSE, engine='sh'>>=
# Ignore LaTeX compile byproduct files #
########################################
*.aux
*.bbl
*.blg
cache/*
figure/*
*.log
*.pdf
*.gz
*.tex
@

\noindent The asterisk (\verb|*|) is a ``wildcard''\index{wildcard} and stands for any character. In other words, it tells Git to look for files with any name that end with a specified file extension. This is faster than writing out the full name of every file you want to ignore individually. It also makes it easy to copy the rules into new repos. You'll notice the \texttt{cache/*} and \texttt{figure/*} rules. These tell Git to ignore all of the files in the \emph{cache} and \emph{figure} subdirectories. These files are the product of caching code chunks and creating figures with \emph{knitr}, respectively.

Git will not ignore files that have already been committed to a repository. To ignore these files you will first need to remove them from Git with Git's \texttt{rm} (remove) command.\index{Git command!rm} If you wanted to remove a file called \emph{ExampleProject.tex} from version tracking type:

<<Ch5Gitrm, eval=FALSE, engine='sh'>>=
# Remove ExampleProject.tex from Git version tracking
git rm --cached ExampleProject.tex
@

\noindent Using the \texttt{--cached} argument tells Git not to track the file, but not delete it.

For more information on \emph{.gitignore} files, see GitHub's reference page on the topic at: \url{https://help.GitHub.com/articles/ignoring-files}.


\subsection{Remote storage on GitHub}
So far we've been using repos stored locally. Let's now look at how to also store a repository remotely on GitHub. You can either create a new repository on GitHub and download (\texttt{clone}) it to your computer or upload (\texttt{push}) an existing repository to a new GitHub remote repo. In both cases you need to create a new repository on GitHub.

To create a new repository on GitHub go to your main GitHub account webpage and click the \texttt{New repository} button. On the next page that appears, give the repository a name, brief description, and choose whether to make it public or private. If you want to store an existing repository on GitHub give it the same name as the one that already exists on your computer. If you already have files in your local repository do not check the boxes for creating \emph{README.md}, \emph{LICENSE}, and \emph{.gitignore} files. When you then click \texttt{Create Repository} you will be directed to the repository's GitHub webpage.\footnote{Before the repo has any files in it, the webpage will include instructions for how to set it up on your computer.}\label{NewGitHubRepo}


\paragraph{Clone a new remote repository}

If you are working with a new repository and do not have an existing version on your computer you need to ``clone'' the GitHub repo to your computer.\index{Git!clone} The repo's GitHub page contains a button called \texttt{Clone in Desktop}. Clicking this will open GUI GitHub (if it is installed) and prompt you to specify what directory on your computer you would like to clone the repository into. You can also use the \texttt{clone}\index{Git command!clone} command in the shell. Imagine that the URL for a repo called \emph{Example Project} is \texttt{https://GitHub.com/USERNAME/ExampleProject.git}. To clone it into the \emph{/git\_repositories} directory type:\footnote{If you are on the repo's webpage the URL to copy is under \texttt{HTTPS clone URL}.}\label{GitClone}

<<Ch5Clone, eval=FALSE, engine='sh'>>=
# Change working directory
cd /git_repositories/

# Clone ExampleProject
git clone https://GitHub.com/USERNAME/ExampleProject.git
@

\paragraph{Push an existing repository to a new GitHub repo}\label{RemoteAdd}

If you already have a repository with files in it on your computer and you want to store them remotely in a new GitHub repo, you need to add the remote repository and \texttt{push}\index{Git command!push} your files to it. Type Git's \texttt{remote add}\index{Git command!remote add} command. For example, if your repository's GitHub URL is \texttt{https://GitHub.com/USERNAME/ExampleProject.git}, then type:

{\small
<<Ch5GitRemoteAdd, eval=FALSE, engine='sh'>>=
# Change working directory to existing local repo
cd /git_repositories/ExampleProject

# Add a remote (GitHub) repository to an existing repo
git remote add origin https://GitHub.com/USERNAME/ExampleProject.git
@
}

\noindent This will tell your local repository where the remote one is. Finally, push the repository to GitHub:

<<Ch5GitPushRemote, eval=FALSE, engine='sh'>>=
# Push local repository to GitHub for the first time
git push -u origin master
@

\noindent The \texttt{-u} (upstream tracking)\index{Git!upstream tracking} option adds a tracking reference for the upstream (GitHub) repository branches.

\paragraph{Pushing commits to a GitHub repo}

Once you have your local repository connected to GitHub you can add new commits with the \texttt{push}\index{Git command!push} command. For example, if your current working directory is the Git repo you want to push and you have already added/committed the changes you want to include in the remote repo, type:

<<Ch5Push, eval=FALSE, engine='sh'>>=
# Add changes to the GitHub remote master branch
git push origin master
@

\noindent The \texttt{origin} is simply the remotely stored repository on GitHub and \texttt{master} is the master branch. You can change this to another branch if you'd like. If you have not set up password caching\footnote{See \url{https://help.GitHub.com/articles/set-up-git} for more details.} you will now be prompted to give your GitHub user name and password.

You can also push your tags to GitHub.\index{GitHub!tag} To push all of the tags to GitHub type:

<<Ch5PushTags, eval=FALSE, engine='sh'>>=
git push --tags
@

\noindent Now on the repo's GitHub page there will be a \texttt{Tags} section that will allow you to view and download the files in each tagged version of the repository.

\subsection{Accessing on GitHub}

\paragraph{Downloading into R}\label{GitDownload}

In general, the process of downloading data directly into R is similar to what we saw earlier for loading data from Dropbox Public folders. We can simply use the \verb|source_data| command.\index{R function!source\_data} First we need to find our plain-text data file's \emph{raw} URL. To do this, go to your repository's GitHub site, navigate to the file you want to load, and click the \texttt{Raw} button on the right just above the file preview.\label{RawGitHub} I have data in comma-separated values format stored in a GitHub\index{GitHub} repository.\footnote{For full information about the disproportionality data set, please see \url{http://christophergandrud.github.io/Disproportionality_Data/}.} The URL for the raw (plain-text) version of the data is \url{https://raw.githubusercontent.com/christophergandrud/Disproportionality_Data/master/Disproportionality.csv}.\footnote{It has been shortened with Bitly\index{Bitly} in the example.}

<<Ch5URLAddress, message=TRUE, tidy=FALSE>>=
# Place shortened url into URLAddress
UrlAddress <- "http://bit.ly/14aSjxB"

# Download data
DispropData <- repmis::source_data(UrlAddress)

# Show variable names
names(DispropData)
@

\noindent \verb|source_data| downloaded the most recent version of the file from the master branch. As we saw in Section \ref{SepHeadExplain}, running \verb|source_data| gives us a line beginning \emph{\texttt{\#\# SHA-1 hash of}} \ldots. \textbf{Note:} this SHA-1 hash\index{SHA-1 hash} is different from the file's Git commit's SHA-1 hash we discussed earlier. The \verb|source_data| SHA-1 hash is specific to the \emph{file}, and has nothing to do with Git. We will look at this hash more in Chapter \ref{DataGather} (Section \ref{SecureData6}).

We can actually use \verb|source_data| to download a particular version of a file--from a particular Git commit--directly into R. This makes reproducing a specific result much easier. To do this you just need to use a file's raw URL from a particular commit. To find a file's particular commit raw URL first click on the file on GitHub's website. Then click the \texttt{History} button (\includegraphics[scale=0.3]{Children/Chapter8/images8/GitHistory.png}). This will take you to a page listing all of the file's versions. Click on the \texttt{Browse Code} button (\includegraphics[scale=0.5]{Children/Chapter5/images5/BrowseCodeIcon.png}) next to the version of the file that you want to use. Click on the \texttt{Raw} button to be taken to the text-only version of the file. Finally, copy this page's URL address and use it with \verb|source_data|.

For example, I have an old version of the disproportionality data. To download it I find this particular version of the file's URL and use it in \verb|source_data|:

{\small{
<<Ch5sourceDataOld, tidy=FALSE>>=
# Create object containing the file's URL
OldUrlAddress <- paste0("https://raw.githubusercontent.com/",
                    "christophergandrud/",
                    "Disproportionality_Data/",
                    "1a59d360b36eade3b183d6336a",
                    "2262df4f9555d1/",
                    "Disproportionality.csv")

# Download old disproportionality data
DispropOld <- repmis::source_data(OldUrlAddress)
@
}}

\noindent In this example I did not shorten the URL, but instead used the \texttt{paste0}\index{R function!paste0} function to paste it together.\footnote{\texttt{paste0} is the same as \texttt{paste}\index{R function!paste}, but has the argument \texttt{sep = ""} so that white space is not placed between the pasted elements.} You do not have to do this. I did it here so that the URL would fit on the printed page. Notice that the URL is the same as before with one exception: instead of \verb|master| after \verb|Disproportionality_Data| we have this strange series of number and letters: \verb|1a59d360b36ea| \ldots. This is the \emph{commit's} SHA-1 hash.\index{SHA-1 hash}

As we will see in Chapter \ref{StatsModel} (Section \ref{sourceurl}) we can use a very similar process to easily run source code files in R directly downloaded from GitHub with the \verb|source_url| command.

\paragraph{Viewing files}

The GitHub web user interface also allows you, your collaborators (see below) or, if the repo is public, anyone to look at text files from a web browser. Collaborators can actually also create, modify, and commit changes in the web user interface. This can be useful for making small changes, especially from a mobile device without a Git installation. Anyone with a GitHub account can suggest changes to files in a public repository on the repo's website. Simply click the \texttt{Edit} button (\includegraphics[scale=0.5]{Children/Chapter5/images5/EditIcon.png}) above the file and make edits. If the person making the edits is not a designated collaborator, their edits will be sent to the repository's owner for approval.\footnote{This is called a \texttt{pull} request\index{Git command!pull} in Git terminology. See the next section for more details.} This can be a useful way for independent researchers to fix errors.

\subsubsection{Collaboration with GitHub}

Repositories can have official collaborators that can make changes to files in the repo. Public repositories can have unlimited collaborators. Anyone with a GitHub account can be a collaborator. To add a collaborator to a repository you created, click on the \texttt{Settings} button on the repository's website (see Figure \ref{BookRepository}). Then click the \texttt{Collaborators} button on the left-hand side of the page. You will be given a box to enter your collaborator's GitHub user name. If your collaborator doesn't have a GitHub account, they will have to create a new one. Once you add someone as a collaborator they can clone the repository onto their computer as you did earlier and push changes.

\paragraph{Syncing a repository}

If you and your collaborators are both making changes to the files in a repo you might create conflicting changes, i.e. different changes to the same part of a file.\index{conflicts, in files} To avoid too many conflicts, it is a good idea to sync your local repository with the remote repository \textbf{before} you push your commits to GitHub. Use the \texttt{pull command}\index{Git command!pull} to sync your local and remote repository. First add and commit your changes, then type:

<<Ch5Pull, eval=FALSE, engine='sh'>>=
# Sync repository
git pull
@

\noindent If the files you are pulling conflict with your local files you will probably want to resolve these in the individual files and commit the changes. When there are merge conflicts, Git adds both versions of a piece of text to the file. You then open the file and decide which version to keep and which one to delete. When the conflicts are resolved and changes committed, push your merged changes up to the remote repository as we did before.

\subsection{Summing up the GitHub workflow}

We've covered a lot of ground in this section. Let's sum up the basic GitHub workflow you will probably follow once your repo is set up.

\begin{enumerate}
    \item Add any changes you've made with \texttt{git add}.
    \item \texttt{commit} the changes.
    \item \texttt{pull} your collaborators' changes from the GitHub repo, resolve any merge conflicts, and \texttt{commit} the changes.
    \item \texttt{push} your changes to GitHub.
\end{enumerate}

\begin{figure}
    \caption{Creating RStudio Projects}
    \label{NewRStudioProject}
        \begin{center}
            \includegraphics[scale=0.5]{Children/Chapter5/images5/GitNewProject.png}
        \end{center}
\end{figure}

\begin{figure}
    \caption{Creating RStudio Projects in New Directories}
    \label{NewProjectNewDirectory}
    \begin{center}
        \includegraphics[scale=0.5]{Children/Chapter5/images5/NewProject_NewDirectory.png}
    \end{center}
\end{figure}

\section{RStudio \& GitHub}

When you open a Project\index{RStudio!Project}\index{RStudio} with a Git repository in RStudio you will see a new \emph{Git}\index{Git} tab next to \emph{Environment} and \emph{History} (see Figure \ref{GitTab}). From here you can do many of the things we covered in the previous section. Let's look at how to set up and use Git in RStudio Projects.

\subsection{Setting up Git/GitHub with Projects}

You can Git initialize new RStudio Projects, Git initialize existing projects, and create RStudio Projects\index{RStudio!Projects} from cloned repos. When you do any of these things RStudio automatically adds a \emph{.gitignore}\index{Git!.gitignore} file telling Git to ignore \emph{.Rproj.user}, \emph{.Rhistory}, and \emph{.RData} files.

\paragraph{Git with a new project}\label{NewProjectGit}

To create a new project with Git version control, go to \texttt{File} in the RStudio menu bar. Then click \texttt{New Project\ldots}. In the box that appears (see Figure \ref{NewRStudioProject}) select \texttt{New Directory} \textrightarrow \texttt{Empty Project}. Enter the Project's name and desired directory. Make sure to check the dialog box for \texttt{Create a git repository} (see Figure \ref{NewProjectNewDirectory}).

\paragraph{Git initialize existing projects}

If you have an existing RStudio Project and want to add Git version control to it, first go to \texttt{Tools} in the RStudio menu bar. Then select \texttt{Project Options \ldots}. Select the \texttt{Git/SVN} icon. Finally, select \texttt{Git} from the drop-down menu for \texttt{Version Control System:}.

\paragraph{Clone repository into a new project}

Again go to \texttt{File} in the RStudio menu bar to create a new project from a cloned GitHub repository.\index{GitHub} Then click \texttt{New Project\ldots}. Select the \texttt{Version Control} option and then \texttt{Git}. Finally, paste the repository's URL in the field called \texttt{Repository URL:}, enter the directory you would like to locate the cloned repo in, and click \texttt{Create Project}.

\paragraph{Add existing Project repository to GitHub}

You can push an existing Project repository stored on your computer to a new remote repository on GitHub. To do this, first create a new repo on GitHub with the same name as your RStudio Project (see Section \ref{NewGitHubRepo}). Then copy the remote repository's URL like we saw before when we cloned a repository from GitHub (see Section \ref{GitClone}). Open a new shell from within RStudio. To do this, click the \texttt{Shell} button in the \emph{Git} tab's \texttt{More} drop-down menu. Now follow the same steps that we used in Section \ref{RemoteAdd} to connect a locally stored repository to GitHub for the first time.

\begin{figure}
    \caption{The RStudio Git Tab}
    \label{GitTab}
    \begin{center}

    \begin{subfigure}
        \caption{New \emph{ExampleProject} \emph{Git} Tab}
        \label{fig:NewGitTab}
            \includegraphics[scale=0.6]{Children/Chapter5/images5/GitTab.png}
    \end{subfigure}
    \vspace{0.25cm}

    \begin{subfigure}
        \caption{Adding Changes to the Repository}
        \label{fig:AddingChangesToRepo}
            \includegraphics[scale=0.6]{Children/Chapter5/images5/GitAdd.png}
    \end{subfigure}
    \end{center}
\end{figure}

\subsection{Using Git in RStudio Projects}

The RStudio \emph{Git} tab\index{RStudio!Git tab} allows you to do many of the same things with Git that we covered in the previous section. In the top panel of Figure \ref{GitTab} you will see the \emph{Git} tab for a new RStudio Project called \emph{ExampleProject}. It has two files that have not been added or committed to Git. To add and commit the files to the repository, click on the dialog boxes next to the file names. In the bottom panel of Figure \ref{GitTab} you can see that I've created a new R file called \emph{ExampleScript.R} and clicked the dialog box next to it, along with the other files. The yellow question marks in the top panel have now become green A's for ``add''. Clicking \texttt{Commit} opens a new window called \textbf{Review Changes}\index{RStudio!Review Changes window}\index{Git commit!add}\index{Git command!commit} where you can commit the changes. Simply write a commit message in the box called \emph{Commit Message} in the \textbf{Review Changes} window and click \texttt{Commit}. If you add file names to the \emph{.gitignore} files, they will not show up in RStudio's \emph{Git} tab.

If you are using a GitHub repo that is associated with a remote repository on GitHub,\index{GitHub} you can push and pull it with the \texttt{Pull Branches}\index{Git command!pull} and \texttt{Push Branch}\index{Git command!push} buttons in Git menu bar (the blue and green arrows, respectively). You can use the same buttons in the \textbf{Review Changes} window. The \emph{Git} tab also allows you to change branches, revert to previous commits, add files to \verb|.gitignore|, and view your commit history. You can always use the \texttt{More \textrightarrow{} Shell \ldots} option to open a new shell with the Project set as the working directory to complete any other Git task you might want to do.

\index{GitHub|)}\index{Git|)}

\subsection*{Chapter summary}

In this chapter we have primarily learned how to store text-based reproducible research files in ways that allow us and others to access them easily from many locations, enable collaboration, and keep a record of previous versions. In the next chapter we will learn how to use text-based files to reproducibly gather data that we can use in our statistical analyses.
